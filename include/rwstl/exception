#ifndef __STD_EXCEPTION

/***************************************************************************
 *
 * exception - declarations for the Standard Library exception class
 *
 * $Id: exception@#/main/1.14.2/sl1main/sl121main/5  02/21/97 12:16:25  smithey (SL121RA_UNIX)
 *
 ***************************************************************************
 *
 * (c) Copyright 1994-1997 Rogue Wave Software, Inc.
 * ALL RIGHTS RESERVED
 *
 * The software and information contained herein are proprietary to, and
 * comprise valuable trade secrets of, Rogue Wave Software, Inc., which
 * intends to preserve as trade secrets such software and information.
 * This software is furnished pursuant to a written license agreement and
 * may be used, copied, transmitted, and stored only in accordance with
 * the terms of such license and with the inclusion of the above copyright
 * notice.  This software and information or any other copies thereof may
 * not be provided or otherwise made available to any other person.
 *
 * Notwithstanding any other lease or license that may pertain to, or
 * accompany the delivery of, this computer software and information, the
 * rights of the Government regarding its use, reproduction and disclosure
 * are as set forth in Section 52.227-19 of the FARS Computer
 * Software-Restricted Rights clause.
 * 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
 * Technical Data and Computer Software clause at DFARS 252.227-7013.
 * Contractor/Manufacturer is Rogue Wave Software, Inc.,
 * P.O. Box 2328, Corvallis, Oregon 97339.
 *
 * This computer software and information is distributed with "restricted
 * rights."  Use, duplication or disclosure is subject to restrictions as
 * set forth in NASA FAR SUP 18-52.227-79 (April 1985) "Commercial
 * Computer Software-Restricted Rights (April 1985)."  If the Clause at
 * 18-52.227-74 "Rights in Data General" is specified in the contract,
 * then the "Alternate III" clause applies.
 *
 **************************************************************************/

#include <stdcomp.h>
#include "rw/stddefs.h"

#ifndef __RWSTD_EXCEPTION_SEEN

#ifndef _MSC_VER /* avoid warnings -- sad */
  #define __RW_NO_OR_LOW_MSC_VER
#endif
/*#if !defined(_MSC_VER) || (_MSC_VER < 1011)*/
#ifdef __RW_NO_OR_LOW_MSC_VER
typedef void (*terminate_handler) ();
extern terminate_handler set_terminate(terminate_handler f) RWSTD_THROW_SPEC_NULL;
extern void terminate( );

typedef void (*unexpected_handler) ();
extern unexpected_handler set_unexpected( unexpected_handler f)  RWSTD_THROW_SPEC_NULL;
extern void unexpected();
#endif /* !defined(_MSC_VER) || (_MSC_VER < 1011) */

#ifndef RWSTD_NO_NAMESPACE 
namespace std {
#endif

extern const char RWSTDExportFunc(*) __rw_stdexcept_NoNamedException;
extern const char RWSTDExportFunc(*) __rw_stdexcept_BadException;

//
// Temporarily turn off the warnings under the Borland compiler that
// say 'Functions containing ... cannot be inlined'
//
#if defined(__BORLANDC__)
#pragma warn -inl
#endif

#ifdef RWSTD_RENAME_EXCEPTION
#  ifdef RWSTD_EXCEPTION_PREDEFINED
#    undef RWSTD_EXCEPTION_PREDEFINED
#  endif
#  define RWSTD_exception std_exception
#else
#  define RWSTD_exception exception
#endif

#ifdef RWSTD_EXCEPTION_PREDEFINED

// MSVC < 4.2  has its own (non-standard) exception class.  We need to use it
// in order to allow the use of MSVC typeinfo exception classes 
// derived from it.
#ifdef _MSC_VER
#ifndef RWSTD_NO_NAMESPACE 
}
#endif
#if _MSC_VER < 1011
#include <stdexcpt.h>
#else
// MSVC 4.2
// Here we must use their standard exception class since they've already 
// compiled it into their libraries
//
#include RWSTD_MS42_HEADER(exception) 
#endif /*  _MSC_VER < 1011 */
#ifndef RWSTD_NO_NAMESPACE 
namespace std {
#endif
#endif /*  _MSC_VER */

#else
class RWSTDExport RWSTD_exception     
{ 
  public:
    RWSTD_exception () RWSTD_THROW_SPEC_NULL
    { ; }
    RWSTD_exception (const RWSTD_exception&) RWSTD_THROW_SPEC_NULL 
    { ; }
    RWSTD_exception& operator= (const RWSTD_exception&)  RWSTD_THROW_SPEC_NULL
    { return *this; }
    virtual ~RWSTD_exception ()  RWSTD_THROW_SPEC_NULL 
    { ; }
    virtual const char * what () const  RWSTD_THROW_SPEC_NULL
    {
        return  __rw_stdexcept_NoNamedException;
    }
};
#endif /* RWSTD_EXCEPTION_DEFINED */

/*#if !defined(_MSC_VER) || (_MSC_VER < 1011)*/
#ifdef __RW_NO_OR_LOW_MSC_VER
class RWSTDExport bad_exception : public RWSTD_exception     
{ 
  public:
    bad_exception () RWSTD_THROW_SPEC_NULL : RWSTD_exception( )
    { ; }
    bad_exception(const bad_exception&) RWSTD_THROW_SPEC_NULL
    { ; }
    bad_exception& operator=(const bad_exception&) RWSTD_THROW_SPEC_NULL
    { return *this; }
    virtual ~bad_exception ()  RWSTD_THROW_SPEC_NULL 
    { ; }
    virtual const char * what () const  RWSTD_THROW_SPEC_NULL
    {
        return __rw_stdexcept_BadException;
    }
};
#endif /* !defined(_MSC_VER) || (_MSC_VER < 1011) */

#define __RWSTD_EXCEPTION_SEEN


#ifndef RWSTD_NO_NAMESPACE 
} 
#endif


//
// Yes, the exception hierarchy has been seen!
//
#endif /*__RWSTD_EXCEPTION_SEEN*/


//
// Yes, the complete file has been processed!
//
#define __STD_EXCEPTION

#endif /*__STD_EXCEPTION */
