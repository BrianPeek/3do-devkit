#ifndef __STD_STDEXCEPT

/***************************************************************************
 *
 * stdexcept - declarations for the Standard Library standard exception class
 *
 * $Id: stdexcept@#/main/1.34.2/sl1main/sl121main/0  02/21/97 12:04:45  smithey (SL121RA_UNIX)
 *
 ***************************************************************************
 *
 * (c) Copyright 1994-1997 Rogue Wave Software, Inc.
 * ALL RIGHTS RESERVED
 *
 * The software and information contained herein are proprietary to, and
 * comprise valuable trade secrets of, Rogue Wave Software, Inc., which
 * intends to preserve as trade secrets such software and information.
 * This software is furnished pursuant to a written license agreement and
 * may be used, copied, transmitted, and stored only in accordance with
 * the terms of such license and with the inclusion of the above copyright
 * notice.  This software and information or any other copies thereof may
 * not be provided or otherwise made available to any other person.
 *
 * Notwithstanding any other lease or license that may pertain to, or
 * accompany the delivery of, this computer software and information, the
 * rights of the Government regarding its use, reproduction and disclosure
 * are as set forth in Section 52.227-19 of the FARS Computer
 * Software-Restricted Rights clause.
 * 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
 * Technical Data and Computer Software clause at DFARS 252.227-7013.
 * Contractor/Manufacturer is Rogue Wave Software, Inc.,
 * P.O. Box 2328, Corvallis, Oregon 97339.
 *
 * This computer software and information is distributed with "restricted
 * rights."  Use, duplication or disclosure is subject to restrictions as
 * set forth in NASA FAR SUP 18-52.227-79 (April 1985) "Commercial
 * Computer Software-Restricted Rights (April 1985)."  If the Clause at
 * 18-52.227-74 "Rights in Data General" is specified in the contract,
 * then the "Alternate III" clause applies.
 *
 **************************************************************************/

#include <stdcomp.h>

#ifndef RWSTD_HEADER_REQUIRES_HPP
#include <string>
#else
#include <string.hpp>
#endif

#ifndef __RWSTD_EXCEPT_SEEN
#ifndef RWSTD_HEADER_REQUIRES_HPP
#include <exception>
#else
#include <exception.hpp>
#endif

#ifndef RWSTD_NO_NAMESPACE 
namespace std {
#endif

// MSVC provides its own exception class and logic_error class.  
// In order to allow the use of MSVC classes derived from these
// We have to use them to, instead of our own.  The drawback is 
// that we don't have a logic_error(const string&) constructor any
// more.  Now we have a logic_error(const char *) constructor.
#ifndef RWSTD_LOGIC_ERROR_PREDEFINED
class RWSTDExport logic_error : public RWSTD_exception
{
  public:
    logic_error (const string& what_arg)  RWSTD_THROW_SPEC_NULL       
      : str_(what_arg)
    { ; }

    virtual ~logic_error ()  RWSTD_THROW_SPEC_NULL 
    { ; }

    virtual const char * what () const  RWSTD_THROW_SPEC_NULL
    {
        return str_.data();
    }

  private:
    string str_;
};
#endif

class RWSTDExport domain_error : public logic_error
{
  public:
    domain_error (const string& what_arg) RWSTD_THROW_SPEC_NULL 
#ifndef RWSTD_LOGIC_ERROR_PREDEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif

    virtual ~domain_error ()  RWSTD_THROW_SPEC_NULL 
    { ; }
};

class RWSTDExport invalid_argument : public logic_error
{
  public:
    invalid_argument (const string& what_arg) RWSTD_THROW_SPEC_NULL 
#ifndef  RWSTD_LOGIC_ERROR_PREDEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif

    virtual ~invalid_argument ()  RWSTD_THROW_SPEC_NULL 
    { ; }
};

class RWSTDExport length_error : public logic_error
{
  public:
    length_error (const string& what_arg) RWSTD_THROW_SPEC_NULL 
#ifndef  RWSTD_LOGIC_ERROR_PREDEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif

    virtual ~length_error ()  RWSTD_THROW_SPEC_NULL 
    { ; }
};

class RWSTDExport out_of_range : public logic_error
{
  public:
    out_of_range (const string& what_arg) RWSTD_THROW_SPEC_NULL 
#ifndef  RWSTD_LOGIC_ERROR_PREDEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif

    virtual ~out_of_range ()  RWSTD_THROW_SPEC_NULL 
    { ; }
};

class RWSTDExport runtime_error : public RWSTD_exception
{
  public:
    runtime_error (const string& what_arg) RWSTD_THROW_SPEC_NULL  
      : str_(what_arg)
    { ; }

    virtual ~runtime_error ()  RWSTD_THROW_SPEC_NULL 
    { ; }

    virtual const char * what () const  RWSTD_THROW_SPEC_NULL
    {
        return str_.data();
    }

  private:
    string str_;
};

class RWSTDExport range_error : public runtime_error
{
  public:
    range_error (const string& what_arg) RWSTD_THROW_SPEC_NULL 
      : runtime_error(what_arg) {;}

    virtual ~range_error ()  RWSTD_THROW_SPEC_NULL 
    { ; }
};

class RWSTDExport overflow_error : public runtime_error
{
  public:
    overflow_error (const string& what_arg) RWSTD_THROW_SPEC_NULL 
      : runtime_error(what_arg) {;}

    virtual ~overflow_error ()  RWSTD_THROW_SPEC_NULL 
    { ; }
};

#define __RWSTD_EXCEPT_SEEN

#ifndef RWSTD_NO_NAMESPACE 
} 
#endif

#endif /*__RWSTD_EXCEPT_SEEN*/

//
// Yes, the complete file has been processed!
//
#define __STD_STDEXCEPT

#endif /*__STD_STDEXCEPT*/
