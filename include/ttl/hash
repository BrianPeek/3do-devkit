/*
  ISC License

  Copyright (c) 2021, Antonio SJ Musumeci <trapexit@spawn.link>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#pragma include_only_once

#include "cstdint"


template<typename T>
struct hash;

template<>
struct hash<bool>
{
  uint32_t
  operator()(bool v_) const
  {
    return (uint32_t)(v_);
  }
};

template<>
struct hash<int8_t>
{
  uint32_t
  operator()(int8_t v_) const
  {
    return (uint32_t)(v_);
  }
};

template<>
struct hash<uint8_t>
{
  uint32_t
  operator()(uint8_t v_) const
  {
    return (uint32_t)(v_);
  }
};

template<>
struct hash<int16_t>
{
  uint32_t
  operator()(int16_t v_) const
  {
    return (uint32_t)(v_);
  }
};

template<>
struct hash<uint16_t>
{
  uint32_t
  operator()(uint16_t v_) const
  {
    return (uint32_t)(v_);
  }
};

template<>
struct hash<int32_t>
{
  uint32_t
  operator()(int32_t v_) const
  {
    return (uint32_t)(v_);
  }
};

template<>
struct hash<uint32_t>
{
  uint32_t
  operator()(uint32_t v_) const
  {
    return (uint32_t)(v_);
  }
};

template<typename T>
struct hash<T*>
{
  uint32_t
  operator()(const T *v_) const
  {
    if(sizeof(uint32_t) == sizeof(T*))
      return (uint32_t)(v_);
    return (uint32_t)(v_); // proper hash;
  }
};
