/*
  ISC License

  Copyright (c) 2021, Antonio SJ Musumeci <trapexit@spawn.link>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#pragma include_only_once

#include "memory"


template<typename T>
class allocator
{
public:
  typedef unsigned int size_type;
  typedef signed int   difference_type;
  typedef T*           pointer;
  typedef const T*     const_pointer;
  typedef T&           reference;
  typedef const T&     const_reference;
  typedef T            value_type;

public:
  allocator() {}
  ~allocator() {}

public:
  pointer
  address(reference x_) const
  {
    return &x_;
  }

  const_pointer
  address(const_reference x_) const
  {
    return &x_;
  }

  pointer
  allocate(size_type n_,
           pointer   hint_ = 0)
  {
    (void)hint_;

    return (pointer)::operator new(n_ * sizeof(T));
  }

  void
  deallocate(pointer p_)
  {
    ::operator delete(p_);
  }

  size_type
  max_size(void) const
  {
    return (size_type)-1;
  }

  void
  construct(pointer         p_,
            const_reference v_)
  {
    memory_construct(p_,v_);
  }

  void
  construct(pointer p_)
  {
    memory_construct(p_);
  }

  void
  destroy(pointer p_)
  {
    memory_destruct(p_);
  }
};
