/*
  ISC License

  Copyright (c) 2021, Antonio SJ Musumeci <trapexit@spawn.link>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#pragma include_only_once

#include "string"

#include "string.h"


struct filesystem
{
  class path
  {
  public:
    path()
    {
    }

    path(const path &p_)
      : _path(p_._path)
    {
    }

    path(const string &s_)
      : _path(s_)
    {
    }

    path(const char *s_)
      : _path(s_)
    {
    }

  public:
    const
    char*
    c_str() const
    {
      return _path.c_str();
    }

    const
    string&
    str() const
    {
      return _path;
    }

    operator const string&() const
    {
      return _path;
    }

  public:
    path&
    append(const char              *str_,
           const string::size_type  len_)
    {
      _path.append(sep);
      _path.append(str_,len_);

      return *this;
    }

    path&
    append(const char *str_)
    {
      const string::size_type len = strlen(str_);

      return append(str_,len);
    }

    path&
    append(const string &str_)
    {
      _path.append(sep);
      _path.append(str_);

      return *this;
    }

    path&
    append(const path &path_)
    {
      return append(path_._path);
    }

    path&
    operator/=(const char *str_)
    {
      return append(str_);
    }

    path&
    operator/=(const string &str_)
    {
      return append(str_);
    }

    path&
    operator/=(const path &path_)
    {
      return append(path_);
    }

    path&
    concat(const char              *str_,
           const string::size_type  len_)
    {
      _path.append(str_,len_);

      return *this;
    }

    path&
    concat(const char *str_)
    {
      _path += str_;

      return *this;
    }

    path&
    concat(const string &str_)
    {
      _path += str_;

      return *this;
    }

    path&
    concat(const path &path_)
    {
      _path += path_._path;

      return *this;
    }

    path&
    operator+=(const char *str_)
    {
      return concat(str_);
    }

    path&
    operator+=(const string &str_)
    {
      return concat(str_);
    }

    path&
    operator+=(const path &path_)
    {
      return concat(path_);
    }

    path
    filename() const
    {
      const char *f;
      const char *b;

      f = &_path.front();
      b = &_path.back();
      while((b != f) && (*b != sep))
        b--;
      if(b != f)
        b++;

      return path(b);
    }

    path&
    remove_filename()
    {
      const char *f;
      const char *b;

      f = &_path.front();
      b = &_path.back();
      while((b != f) && (*b != sep))
        b--;

      _path.erase(b - f);

      return *this;
    }

    path&
    replace_filename(const char *filename_)
    {
      return remove_filename().append(filename_);
    }

    path&
    replace_filename(const string &filename_)
    {
      return remove_filename().append(filename_);
    }

    path&
    replace_filename(const path &filename_)
    {
      return remove_filename().append(filename_);
    }

  private:
    string _path;
    static const char sep = '/';
  };
};

static
inline
filesystem::path
operator/(const filesystem::path &lhs_,
          const filesystem::path &rhs_)
{
  filesystem::path path;

  path  = lhs_;
  path /= rhs_;

  return path;
}
