/*
  ISC License

  Copyright (c) 2021, Antonio SJ Musumeci <trapexit@spawn.link>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#ifndef TTL_ITERATOR_TRAITS_INCLUDED
#define TTL_ITERATOR_TRAITS_INCLUDED

#include "iterator_tags"

template<typename ITER>
struct iterator_traits
{
  typedef typename ITER::difference_type   difference_type;
  typedef typename ITER::value_type        value_type;
  typedef typename ITER::pointer           pointer;
  typedef typename ITER::reference         reference;
  typedef typename ITER::iterator_category iterator_category;
};

template<typename T>
struct iterator_traits<T*>
{
  typedef random_access_iterator_tag iterator_category;
  typedef T                          value_type;
  typedef int                        difference_type;
  typedef T*                         pointer;
  typedef T&                         reference;
};

// template<typename T>
// struct iterator_traits<const T*>
// {
//   typedef iterator_tag::random_access iterator_category;
//   typedef T                           value_type;
//   typedef unsigned int                difference_type;
//   typedef const T*                    pointer;
//   typedef const T&                    reference;
// };

#endif
