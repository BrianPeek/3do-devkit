<HTML><TITLE>negate</TITLE><BODY>
<A HREF="ref.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the Class Reference home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>negate</H2>
<HR><PRE>     Function Object</PRE><HR>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Unary function object that returns the negation of its argument.</P>
<H3>Contents</H3>
<UL>
<A HREF="#Synopsis"><LI>Synopsis</LI></A>
<A HREF="#Description"><LI>Description</LI></A>
<A HREF="#Interface"><LI>Interface</LI></A>
<A HREF="#Warning"><LI>Warning</LI></A>
<A HREF="#See Also"><LI>See Also</LI></A>
</UL>
<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>#include &#60;functional>

   template &#60;class T>
   struct <B>negate : </B>public unary_function&#60;T, T>;
</PRE>
<A NAME="Description"><H3>Description</H3></A>
<P><B><I>negate</B></I> is a unary function object.  Its <SAMP>operator()</SAMP> returns the negation of its argument, i.e., <SAMP>true</SAMP> if its argument is <SAMP>false</SAMP>, or <SAMP>false</SAMP> if its arguement is <SAMP>true</SAMP>.  You can pass a <B><I>negate</B></I> object to any algorithm that requires a unary function. For example, the <A HREF="tra_4787.htm"><B><I>transform</B></I></A> algorithm applies a unary operation to the values in a collection and stores the result.   <B><I>negate</B></I> could be used in that algorithm in the following manner:</P>
<PRE>vector&#60;int> vec1;
vector&#60;int> vecResult;
.
.
.
transform(vec1.begin(), vec1.end(),          vecResult.begin(), <B>negate&#60;int>()</B>);</PRE>
<PRE></PRE><P>After this call to <A HREF="tra_4787.htm"><B><I>transform</B></I></A>, <SAMP>vecResult(n)</SAMP> will contain the negation of the element in <SAMP>vec1(n)</SAMP>.</P>
<A NAME="Interface"><H3>Interface</H3></A>
<PRE>template &#60;class T></PRE>
<PRE>struct negate : unary_function&#60;T, T> {
  typedef typename unary_function&#60;T,T>::argument_type argument_type;
  typedef typename unary_function&#60;T,T>::result_type result_type;
  T operator() (const T&#38;) const;
};
</PRE>
<A NAME="Warning"><H3>Warning</H3></A>
<P>If your compiler does not support default template parameters, then you need to always supply the <SAMP>Allocator</SAMP> template argument.  For instance, you will need to write :</P>
<P><SAMP>vector&#60;int, allocator></SAMP></P>
<P>instead of : </P>
<P><SAMP>vector&#60;int></SAMP></P>
<A NAME="See Also"><H3>See Also</H3></A>
<P><A HREF="Fun_7437.htm"><B><I>Function Objects</B></I></A>, <A HREF="una_4659.htm"><B><I>unary_function</B></I></A></P>
<HR>
<A HREF="mul_0958.htm"><IMG SRC="images/prev.gif"></A> <A HREF="ref.htm#contents"><IMG SRC="images/toc.gif"></A> <A HREF="Neg_5086.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
