<HTML><TITLE>list</TITLE><BODY>
<A HREF="ref.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the Class Reference home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>list</H2>
<HR><PRE>     Container</PRE><HR>
<A NAME="Summary"><H3>Summary</H3></A>
<P>A sequence that supports bidirectional iterators</P>
<H3>Contents</H3>
<UL>
<A HREF="#Synopsis"><LI>Synopsis</LI></A>
<A HREF="#Description"><LI>Description</LI></A>
<A HREF="#Interface"><LI>Interface</LI></A>
<A HREF="#Constructors and Destructors"><LI>Constructors and Destructors</LI></A>
<A HREF="#Assignment Operator"><LI>Assignment Operator</LI></A>
<A HREF="#Allocator"><LI>Allocator</LI></A>
<A HREF="#Iterators"><LI>Iterators</LI></A>
<A HREF="#Member Functions"><LI>Member Functions</LI></A>
<A HREF="#Non-member Operators"><LI>Non-member Operators</LI></A>
<A HREF="#Example"><LI>Example</LI></A>
<A HREF="#Warnings"><LI>Warnings</LI></A>
<A HREF="#See Also"><LI>See Also</LI></A>
</UL>
<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>#include &#60;list></PRE>
<PRE>
template &#60;class T, class Allocator = allocator>
class <B>list</B>;
</PRE>
<A NAME="Description"><H3>Description</H3></A>
<P><B><I>list&#60;T,Allocator></B></I> is a type of sequence that  supports bidirectional iterators.  A <B><I>list&#60;T,Allocator></B></I> allows constant time insert and erase operations anywhere within the sequence, with storage management handled automatically. Constant time random access is not supported. </P>
<P>Any type used for the template parameter <SAMP>T</SAMP> must provide  the following (where <SAMP>T</SAMP> is the type, <SAMP>t</SAMP> is a <SAMP>value</SAMP> of <SAMP>T</SAMP> and <SAMP>u</SAMP> is a <SAMP>const</SAMP> <SAMP>value</SAMP> of <SAMP>T</SAMP>): </P>
<PRE>  Default constructor   T()</PRE>
<PRE>  Copy constructors     T(t) and T(u)
  Destructor            t.~T()
  Address of            &#38;t and &#38;u yielding T* and
                         const T* respectively
  Assignment            t = a where a is a
                         (possibly const) value of T</PRE>
<A NAME="Interface"><H3>Interface</H3></A>
<PRE>template &#60;class T, class Allocator = allocator></PRE>
<PRE> class list {
public:
// typedefs
   class iterator;
   class const_iterator;
   typename reference;
   typename const_reference;
   typename size_type;
   typename difference_type;
   typedef T value_type;
   typedef Allocator allocator_type;
   typename reverse_iterator;
   typename const_reverse_iterator;
// Construct/Copy/Destroy
   explicit list (const Allocator&#38; = Allocator());
   explicit list (size_type, const Allocator&#38; = Allocator());
   list (size_type, const T&#38;, const Allocator&#38; = Allocator())
   template &#60;class InputIterator>
   list (InputIterator, InputIterator, 
         const Allocator&#38; = Allocator());
   list(const list&#60;T, Allocator>&#38; x);
   ~list();
   list&#60;T,Allocator>&#38; operator= (const list&#60;T,Allocator>&#38;);
   template &#60;class InputIterator>
    void assign (InputIterator, InputIterator);
   template &#60;class Size, class T>
    void assign (Size n);
   template &#60;class Size, class T>
    void assign (Size n, const T&#38;);
   allocator_type get allocator () const;
// Iterators
   iterator begin ();
   const_iterator begin () const;
   iterator end ();
   const_iterator end () const;
   reverse_iterator rbegin ();
   const_reverse_iterator rbegin () const;
   reverse_iterator rend ();
   const_reverse_iterator rend () const;
// Capacity
   bool empty () const;
   size_type size () const;
   size_type max_size () const;
   void resize (size_type);
   void resize  (size_type, T);
// Element Access
   reference front ();
   const_reference front () const;
   reference back ();
   const_reference back () const;
// Modifiers
   void push_front (const T&#38;);
   void pop_front ();
   void push_back (const T&#38;);
   void pop_back ();
   iterator insert (iterator);
   iterator insert (iterator, const T&#38;);
   void insert (iterator, size_type, const T&#38;);
   template &#60;class InputIterator>
    void insert  (iterator, InputIterator, InputIterator);
   iterator erase (iterator);
   iterator erase (iterator, iterator);
   void swap (list&#60;T, Allocator>&#38;);
   void clear ();
// Special mutative operations on list
   void splice (iterator, list&#60;T, Allocator>&#38;);
   void splice (iterator, list&#60;T, Allocator>&#38;, iterator);
   void splice (iterator, list&#60;T, Allocator>&#38;, iterator, iterator);
   void remove (const T&#38;);
   template &#60;class Predicate>
    void remove_if (Predicate);
   void unique ();
   template &#60;class BinaryPredicate>
    void unique (BinaryPredicate);
   void merge (list&#60;T, Allocator>&#38;);
   template &#60;class Compare>
    void merge (list&#60;T, Allocator>&#38;, Compare);
   void sort ();
   template &#60;class Compare>
    void sort (Compare);
   void reverse();
};
// Non-member List Operators
template &#60;class T>
 bool <B>operator==</B> (const list&#60;T, Allocator>&#38;, 
                  const list&#60;T, Allocator>&#38;);
template &#60;class T>
 bool <B>operator&#60;</B> (const list&#60;T, Allocator>&#38;,
                 const list&#60;T, Allocator>&#38;);
// Specialized Algorithms
template &#60;class T, class Allocator>
void swap (list&#60;T,Allocator>&#38;, list&#60;T, Allocator>&#38;);
</PRE>
<A NAME="Constructors and Destructors"><H3>Constructors and Destructors</H3></A>
<PRE>explicit <B>list </B>(const Allocator&#38; alloc = Allocator());</PRE>
<UL><P>Creates a list of zero elements. The list will use the allocator <SAMP>alloc</SAMP> for all storage management.</P>
</UL>
<PRE>explicit <B>list</B> (size_type n, 
               const Allocator&#38; alloc = Allocator());</PRE>
<UL><P>Creates a list of length <SAMP>n</SAMP>, containing <SAMP>n</SAMP> copies of the default value for type <SAMP>T</SAMP>. Requires that <SAMP>T</SAMP> have a default constructor. The list will use the allocator <SAMP>alloc</SAMP> for all storage management. </P>
</UL>
<PRE><B>list</B> (size_type n, const T&#38; value, 
      const Allocator&#38; alloc = Allocator());</PRE>
<UL><P>Creates a list of length <SAMP>n</SAMP>, containing <SAMP>n</SAMP> copies of <SAMP>value</SAMP>. The list will use the allocator <SAMP>alloc</SAMP> for all storage management. </P>
</UL>
<PRE>template &#60;class InputIterator>
<B>list</B> (InputIterator first, InputIterator last,
      const Allocator&#38; alloc = Allocator()); </PRE>
<UL><P>Creates a list of length <SAMP>last - first</SAMP>, filled with all values obtained by dereferencing the <SAMP>InputIterators</SAMP> on the range<SAMP> [first, last)</SAMP>. The list will use the allocator <SAMP>alloc</SAMP> for all storage management.</P>
</UL>
<PRE><B>list</B> (const list&#60;T, Allocator>&#38; x);</PRE>
<UL><P>Copy constructor.  Creates a copy of <SAMP>x</SAMP>.</P>
</UL>
<PRE><B>~list</B> ();</PRE>
<UL><P>The destructor. Releases any allocated memory for this list.</P>
</UL>
<A NAME="Assignment Operator"><H3>Assignment Operator</H3></A>
<PRE>list&#60;T, Allocator>&#38; <B>operator= </B>(const list&#60;T, Allocator>&#38; x)</PRE>
<UL><P>Erases all elements in self then inserts into self a copy of each element in <SAMP>x</SAMP>.  Returns a reference to <SAMP>*this</SAMP>.</P>
</UL>
<A NAME="Allocator"><H3>Allocator</H3></A>
<PRE>allocator_type <B>get_allocator</B> () const;</PRE>
<UL><P>Returns a copy of the allocator used by self for storage management.</P>
</UL>
<A NAME="Iterators"><H3>Iterators</H3></A>
<PRE>iterator <B>begin</B> ();</PRE>
<UL><P>Returns a bidirectional iterator that points to the first element.</P>
</UL>
<PRE>const_iterator <B>begin</B> () const;</PRE>
<UL><P>Returns a constant bidirectional iterator that points to the first element.</P>
</UL>
<PRE>iterator <B>end</B> ();</PRE>
<UL><P>Returns a bidirectional iterator that points to the past-the-end value.</P>
</UL>
<PRE>const_iterator <B>end</B> () const;</PRE>
<UL><P>Returns a constant bidirectional iterator  that  points to the past-the-end value.</P>
</UL>
<PRE>reverse_iterator <B>rbegin</B> ();</PRE>
<UL><P>Returns a bidirectional iterator that points to the past-the-end value.</P>
</UL>
<PRE>const_reverse_iterator <B>rbegin</B> () const;</PRE>
<UL><P>Returns a constant bidirectional iterator that points to the past-the-end value.</P>
</UL>
<PRE>reverse_iterator <B>rend</B> ();</PRE>
<UL><P>Returns a bidirectional iterator that points to the first element.</P>
</UL>
<PRE>const_reverse_iterator <B>rend</B> () const;</PRE>
<UL><P>Returns a constant bidirectional iterator  that  points to the first element.</P>
</UL>
<A NAME="Member Functions"><H3>Member Functions</H3></A>
<PRE>template &#60;class InputIterator>
void 
<B>assign</B> (InputIterator first, InputIterator last);</PRE>
<UL><P>Erases all elements contained in self, then inserts new elements from the range <SAMP>[first, last)</SAMP>.</P>
</UL>
<PRE>template &#60;class Size, class T>
void 
<B>assign</B> (Size n);</PRE>
<UL><P>Erases all elements contained in self, then inserts <SAMP>n</SAMP> instances of the default <SAMP>value</SAMP> of <SAMP>t.</SAMP></P>
</UL>
<PRE>template &#60;class Size, class T>
void 
<B>assign</B> (Size n, const T&#38; t);</PRE>
<UL><P>Erases all elements contained in self, then inserts <SAMP>n</SAMP> instances of the <SAMP>value</SAMP> of <SAMP>t.</SAMP></P>
</UL>
<PRE>reference 
<B>back</B> ();</PRE>
<UL><P>Returns a <SAMP>reference</SAMP> to the last element.</P>
</UL>
<PRE>const_reference 
<B>back</B> () const;</PRE>
<UL><P>Returns a constant reference to the last element.</P>
</UL>
<PRE>void
<B>clear</B> ();</PRE>
<UL><P>Erases all elements from the list.</P>
</UL>
<PRE>bool 
<B>empty</B> () const;</PRE>
<UL><P>Returns <SAMP>true</SAMP> if the <SAMP>size</SAMP> is zero.</P>
</UL>
<PRE>iterator
<B>erase</B> (iterator position);</PRE>
<UL><P>Removes the element pointed to by <SAMP>position</SAMP>. Returns an <SAMP>iterator</SAMP> pointing to the element following the deleted element, or <SAMP>end()</SAMP> if the deleted item was the last one in this list.</P>
</UL>
<PRE>iterator
<B>erase</B> (iterator first, iterator last);</PRE>
<UL><P>Removes the elements in the range (<SAMP>first, last</SAMP>). Returns an <SAMP>iterator</SAMP> pointing to the element following the element following the last deleted element, or <SAMP>end()</SAMP> if there were no elements after the deleted range.</P>
</UL>
<PRE>reference 
<B>front</B> ();</PRE>
<UL><P>Returns a <SAMP>reference</SAMP> to the first element.</P>
</UL>
<PRE>const_reference 
<B>front</B> () const;</PRE>
<UL><P>Returns a constant reference to the first element.</P>
</UL>
<PRE>iterator
<B>insert </B>(iterator position);</PRE>
<UL><P>Inserts a copy of the default value for type <SAMP>T</SAMP> before <SAMP>position</SAMP>. Returns an <SAMP>iterator</SAMP> that points to the inserted value. Requires that type <SAMP>T </SAMP>have a default constructor.</P>
</UL>
<PRE>iterator 
<B>insert</B> (iterator position, const T&#38; x);</PRE>
<UL><P>Inserts <SAMP>x</SAMP> before <SAMP>position</SAMP>.  Returns an  <SAMP>iterator</SAMP> that points to the inserted <SAMP>x</SAMP>.</P>
</UL>
<PRE>void 
<B>insert</B> (iterator position, size_type n, const T&#38; x);</PRE>
<UL><P>Inserts <SAMP>n</SAMP> copies of <SAMP>x</SAMP> before <SAMP>position</SAMP>.</P>
</UL>
<PRE>template &#60;class InputIterator>
void 
<B>insert</B> (iterator position, InputIterator first,
        InputIterator last);</PRE>
<UL><P>Inserts copies of the elements in the range <SAMP>[first, last)</SAMP> before <SAMP>position</SAMP>.</P>
</UL>
<PRE>size_type
<B>max_size</B> () const;</PRE>
<UL><P>Returns<SAMP> size()</SAMP> of the largest possible list.</P>
</UL>
<PRE>void <B>merge</B> (list&#60;T, Allocator>&#38; x);</PRE>
<UL><P>Merges a sorted <SAMP>x</SAMP> with a sorted self using <SAMP>operator&#60;</SAMP>.  For equal elements in the two lists, elements from self will always precede the elements from <SAMP>x</SAMP>.  The <SAMP>merge</SAMP> function leaves <SAMP>x</SAMP> empty.</P>
</UL>
<PRE>template &#60;class Compare>
void 
<B>merge</B> (list&#60;T, Allocator>&#38; x, Compare comp);</PRE>
<UL><P>Merges a sorted <SAMP>x</SAMP> with sorted self using a  compare function object,  <SAMP>comp</SAMP>.   For same elements in the two lists, elements from self will always precede the elements from <SAMP>x</SAMP>.  The <SAMP>merge</SAMP> function leaves <SAMP>x</SAMP> empty.</P>
</UL>
<PRE>void 
<B>pop_back</B> ();</PRE>
<UL><P>Removes the last element.</P>
</UL>
<PRE>void 
<B>pop_front</B> ();</PRE>
<UL><P>Removes the first element.</P>
</UL>
<PRE>void 
<B>push_back</B> (const T&#38; x);</PRE>
<UL><P>Appends a copy of <SAMP>x</SAMP> to the end of the list.</P>
</UL>
<PRE>void
<B>push_front</B> (const T&#38; x);</PRE>
<UL><P>Appends a copy of <SAMP>x</SAMP> to the front of the list.</P>
</UL>
<PRE>void 
<B>remove</B> (const T&#38; value);
template &#60;class Predicate>
void 
<B>remove_if</B> (Predicate pred);</PRE>
<UL><P>Removes all elements in the list referred by the list iterator <SAMP>i</SAMP> for which <SAMP>*i == value </SAMP>or<SAMP> pred(*i) == true</SAMP>, whichever is applicable.  This is a stable operation, the relative order of list items  that are not removed is preserved.</P>
</UL>
<PRE>void 
<B>resize</B> (size_type sz);</PRE>
<UL><P>Alters the size of self.  If the new size ( <SAMP>sz</SAMP> ) is greater than the current size, <SAMP>sz</SAMP>-<SAMP>size() </SAMP>copies of the default value of type<SAMP> T </SAMP>are inserted at the end of the list.  If the new size is smaller than the current capacity, then the list is truncated by erasing <SAMP>size()-sz</SAMP> elements off the end. Otherwise,  no action is taken. Requires that type <SAMP>T</SAMP> have a default constructor.</P>
</UL>
<PRE>void 
<B>resize</B> (size_type sz, T c);</PRE>
<UL><P>Alters the size of self.  If the new size ( <SAMP>sz</SAMP> ) is greater than the current size, <SAMP>sz</SAMP>-<SAMP>size() c</SAMP>'s are inserted at the end of the list.  If the new size is smaller than the current capacity, then the list is truncated by erasing <SAMP>size()-sz</SAMP> elements off the end. Otherwise,  no action is taken. </P>
</UL>
<PRE>void 
<B>reverse</B> ();</PRE>
<UL><P>Reverses the order of the elements.</P>
</UL>
<PRE>size_type 
<B>size</B> () const;</PRE>
<UL><P>Returns the number of elements.</P>
</UL>
<PRE>void 
<B>sort</B> ();</PRE>
<UL><P>Sorts self according to the  <SAMP>operator&#60;</SAMP>.  <SAMP>sort</SAMP>  maintains the relative order of equal elements.</P>
</UL>
<PRE>template &#60;class Compare>
void 
<B>sort</B> (Compare comp);</PRE>
<UL><P>Sorts self according to a comparison function object, <SAMP>comp</SAMP>.  This is also a stable sort.   </P>
</UL>
<PRE>void 
<B>splice</B> (iterator position, list&#60;T, Allocator>&#38; x);</PRE>
<UL><P>Inserts <SAMP>x </SAMP>before <SAMP>position</SAMP> leaving <SAMP>x </SAMP>empty.</P>
</UL>
<PRE>void 
<B>splice</B> (iterator position, list&#60;T, Allocator>&#38;  x, iterator i);</PRE>
<UL><P>Moves the elements pointed to by iterator <SAMP>i</SAMP> in <SAMP>x</SAMP> to self, inserting it before <SAMP>position</SAMP>.  The element is removed from <SAMP>x</SAMP>.</P>
</UL>
<PRE>void 
<B>splice</B> (iterator position, list&#60;T, Allocator >&#38;  x,
        iterator first, iterator last);</PRE>
<UL><P>Moves the elements in the range <SAMP>[first, last)</SAMP> in <SAMP>x</SAMP> to self, inserting before <SAMP>position</SAMP>.  The elements in  the range <SAMP>[first, last)</SAMP> are removed from <SAMP>x</SAMP>.</P>
</UL>
<PRE>void
<B>swap</B> (list &#60;T, Allocator>&#38; x);</PRE>
<UL><P>Exchanges self with <SAMP>x</SAMP>.</P>
</UL>
<PRE>void 
<B>unique</B> ();</PRE>
<UL><P>Erases copies of consecutive repeated elements leaving the first occurrrence.</P>
</UL>
<PRE>template &#60;class BinaryPredicate>
void 
<B>unique</B> (BinaryPredicate binary_pred);</PRE>
<UL><P>Erases consecutive elements matching a true condition of the <SAMP>binary_pred</SAMP>.  The first occurrence is not removed.</P>
</UL>
<A NAME="Non-member Operators"><H3>Non-member Operators</H3></A>
<PRE>template &#60;class T, class Allocator>
bool <B>operator==</B> (const list&#60;T, Allocator>&#38; x,
                 const list&#60;T, Allocator>&#38; y);</PRE>
<UL><P>Equality operator. Returns <SAMP>true</SAMP> if <SAMP>x</SAMP> is the same as <SAMP>y</SAMP>.</P>
</UL>
<PRE>template &#60;class T, class Allocator>
bool <B>operator&#60;</B> (const list&#60;T, Allocator>&#38; x,
                const list&#60;T,Allocator>&#38; y);</PRE>
<UL><P>Returns <SAMP>true</SAMP> if the sequence defined by the elements contaned in <SAMP>x</SAMP>  is lexicographically less than the sequence defined by the elements contained in <SAMP>y</SAMP>.</P>
</UL>
<PRE>template &#60;class T, class Allocator>
void <B>swap</B> (list&#60;T, Allocator>&#38; a, list&#60;T, Allocator>&#38; b);</PRE>
<UL><P>Efficiently swaps the contents of <SAMP>a</SAMP> and <SAMP>b</SAMP>.</P>
</UL>
<A NAME="Example"><H3>Example</H3></A>
<PRE>//
// list.cpp
//
 #include &#60;list>
 #include &#60;string>
 #include &#60;iostream.h></PRE><PRE> // Print out a list of strings
 ostream&#38; operator&#60;&#60;(ostream&#38; out, const list&#60;string>&#38; l)
 {
   copy(l.begin(), l.end(), ostream_iterator&#60;string>(cout," "));
   return out;
 }</PRE><PRE> int main(void)
 {
   // create a list of critters
   list&#60;string> critters;
   int i;</PRE><PRE>   // insert several critters 
   critters.insert(critters.begin(),"antelope");
   critters.insert(critters.begin(),"bear");
   critters.insert(critters.begin(),"cat");
   // print out the list
   cout &#60;&#60; critters &#60;&#60; endl;
   
   // Change cat to cougar
   *find(critters.begin(),critters.end(),"cat") = "cougar";
   cout &#60;&#60; critters &#60;&#60; endl;
   // put a zebra at the beginning 
   // an ocelot ahead of antelope
   // and a rat at the end
   critters.push_front("zebra");
   critters.insert(find(critters.begin(),critters.end(),
                   "antelope"),"ocelot");
   critters.push_back("rat");
   cout &#60;&#60; critters &#60;&#60; endl;
   // sort the list (Use list's sort function since the 
   // generic algorithm requires a random access iterator 
   // and list only provides bidirectional)
   critters.sort();
   cout &#60;&#60; critters &#60;&#60; endl;
   // now let's erase half of the critters
   int half = critters.size() >> 1;
   for(i = 0; i &#60; half; ++i) {
     critters.erase(critters.begin());
   }
   cout &#60;&#60; critters &#60;&#60; endl;</PRE>
<PRE>   return 0;</PRE>
<PRE> }
Output : 
cat bear antelope
cougar bear antelope
zebra cougar bear ocelot antelope rat
antelope bear cougar ocelot rat zebra
ocelot  rat zebra
</PRE>
<A NAME="Warnings"><H3>Warnings</H3></A>
<P>Member function templates are used in all containers provided by the Standard Template Library.  An example of this feature is the constructor for <B><I>list&#60;T, Allocator></B></I> that takes two templated iterators:</P>
<PRE>template &#60;class InputIterator></PRE>
<PRE>list (InputIterator, InputIterator, const Allocator&#38; =       Allocator());
</PRE><P><B><I>list</B></I> also has an <SAMP>insert</SAMP> function of this type.  These functions, when not restricted by compiler limitations, allow you to use any type of input iterator as arguments.  For compilers that do not support this feature, we provide substitute functions that allow you to use an iterator obtained from the same type of container as the one you are constructing (or calling a member function on), or you can use a pointer to the type of element you have in the container.</P>
<P>For example, if your compiler does not support member  function templates you can construct a list in the following two ways:</P>
<PRE></PRE>
<PRE>int intarray[10];
list&#60;int> first_list(intarray,intarray + 10);
list&#60;int> second_list(first_list.begin(),first_list.end());
</PRE><P>But not this way:</P>
<PRE></PRE>
<PRE>list&#60;long> long_list(first_list.begin(),first_list.end());
</PRE><P>since the <SAMP>long_list</SAMP> and <SAMP>first_list</SAMP> are not the same type.</P>
<P>Additionally, <B><I>list</B></I> provides a <SAMP>merge </SAMP>function of this type.  </P>
<PRE>template &#60;class Compare> void merge (list&#60;T, Allocator>&#38;,
  Compare);
</PRE><P>This function allows you to specify a compare function object to be used in merging two lists.  In this case, we were unable to provide a substitute function in addition  to the merge that uses the <SAMP>operator&#60; </SAMP>as the default.  Thus, if your compiler does not support member function templates, all list  mergers will use <SAMP>operator&#60;</SAMP>.</P>
<P>Also, many compilers do not support default template arguments.  If your compiler is one of these, you need to always supply the <SAMP>Allocator</SAMP> template argument. For instance, you'll have to write: </P>
<PRE>list&#60;int, allocator></PRE>
<PRE></PRE><P>instead of:</P>
<PRE>list&#60;int></PRE>
<A NAME="See Also"><H3>See Also</H3></A>
<P><A HREF="all_7029.htm"><B><I>allocator</B></I></A>, <A HREF="Con_2487.htm"><B><I>Containers</B></I></A>, <A HREF="Ite_5295.htm"><B><I>Iterators</B></I></A></P>
<HR>
<A HREF="lim_2532.htm"><IMG SRC="images/prev.gif"></A> <A HREF="ref.htm#contents"><IMG SRC="images/toc.gif"></A> <A HREF="log_2801.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
