<HTML><TITLE>lower_bound</TITLE><BODY>
<A HREF="ref.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the Class Reference home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>lower_bound</H2>
<HR><PRE>     Algorithm</PRE><HR>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Determine the first valid position for an element in a sorted container.</P>
<H3>Contents</H3>
<UL>
<A HREF="#Synopsis"><LI>Synopsis</LI></A>
<A HREF="#Description"><LI>Description</LI></A>
<A HREF="#Complexity"><LI>Complexity</LI></A>
<A HREF="#Example"><LI>Example</LI></A>
<A HREF="#Warning"><LI>Warning</LI></A>
<A HREF="#See Also"><LI>See Also</LI></A>
</UL>
<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>template &#60;class ForwardIterator, class T></PRE>
<PRE> ForwardIterator <B>lower_bound</B>(ForwardIterator first, 
                             ForwardIterator last,
                             const T&#38; value);
 template &#60;class ForwardIterator, class T, class Compare>
  ForwardIterator <B>lower_bound</B>(ForwardIterator first, 
                              ForwardIterator last,
                              const T&#38; value, Compare comp);
</PRE>
<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>lower_bound</B></I> algorithm compares a supplied <SAMP>value</SAMP> to elements in a sorted container and returns the first postition in the container that <SAMP>value</SAMP> can occupy without violating the container's ordering.  There are two versions of the algorithm.  The first uses the less than operator (<SAMP>operator&#60;</SAMP>) to perform the comparison, and assumes that the sequence has been sorted using that operator.  The second version lets you include a function object of type <SAMP>Compare</SAMP>, and assumes that <SAMP>Compare</SAMP> is the function used to sort the sequence.  The function object must be a binary predicate. </P>
<P><B><I>lower_bound</B></I>'s return value is the iterator for the first element in the container that is <I>greater than or equal to</I> <SAMP>value</SAMP>, or, when the comparison operator is used, the first element that does not satisfy the comparison function. Formally, the algorithm returns an iterator <SAMP>i</SAMP> in the range <SAMP>[first, last)</SAMP> such that for any iterator <SAMP>j</SAMP> in the range <SAMP>[first, i)</SAMP> the following corresponding conditions hold:  </P>
<PRE>*j  &#60;  value</PRE>
<PRE></PRE><P>or </P>
<PRE> comp(*j,  value) == true</PRE>
<PRE></PRE>
<A NAME="Complexity"><H3>Complexity</H3></A>
<P><B><I>lower_bound</B></I> performs at most <SAMP>log(last - first) + 1</SAMP> comparisons.</P>
<A NAME="Example"><H3>Example</H3></A>
<PRE>//
// ul_bound.cpp
//
 #include &#60;vector>
 #include &#60;algorithm>
 #include &#60;iostream.h>
 
 int main()
 {
   typedef vector&#60;int>::iterator iterator;
   int d1[11] = {0,1,2,2,3,4,2,2,2,6,7};
   // Set up a vector
   vector&#60;int> v1(d1,d1 + 11);
   // Try lower_bound variants
   iterator it1 = <B>lower_bound</B>(v1.begin(),v1.end(),3);
   // it1 = v1.begin() + 4
   iterator it2 = 
       <B>lower_bound</B>(v1.begin(),v1.end(),2,less&#60;int>());
   // it2 = v1.begin() + 4
   // Try upper_bound variants
   iterator it3 = upper_bound(v1.begin(),v1.end(),3);
   // it3 = vector + 5
   iterator it4 = 
      upper_bound(v1.begin(),v1.end(),2,less&#60;int>());
   // it4 = v1.begin() + 5 
   cout &#60;&#60; endl &#60;&#60; endl
        &#60;&#60; "The upper and lower bounds of 3: ( "
        &#60;&#60; *it1 &#60;&#60; " , " &#60;&#60; *it3 &#60;&#60; " ]" &#60;&#60; endl;
   cout &#60;&#60; endl &#60;&#60; endl
        &#60;&#60; "The upper and lower bounds of 2: ( "
        &#60;&#60; *it2 &#60;&#60; " , " &#60;&#60; *it4 &#60;&#60; " ]" &#60;&#60; endl;
   return 0;
 }
Output :
The upper and lower bounds of 3: ( 3 , 4 ]
The upper and lower bounds of 2: ( 2 , 3 ]
</PRE>
<A NAME="Warning"><H3>Warning</H3></A>
<P>If your compiler does not support default template parameters then you need to always supply the <SAMP>Allocator</SAMP> template argument.  For instance you'll have to write:</P>
<PRE>vector&#60;int,allocator></PRE>
<PRE></PRE><P>instead of:</P>
<PRE>vector&#60;int></PRE>
<A NAME="See Also"><H3>See Also</H3></A>
<P><A HREF="upp_0967.htm"><B><I>upper_bound</B></I></A>, <A HREF="equ_3232.htm"><B><I>equal_range</B></I></A></P>
<HR>
<A HREF="log_7695.htm"><IMG SRC="images/prev.gif"></A> <A HREF="ref.htm#contents"><IMG SRC="images/toc.gif"></A> <A HREF="mak_0285.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
