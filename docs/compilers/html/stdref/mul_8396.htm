<HTML><TITLE>multimap</TITLE><BODY>
<A HREF="ref.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the Class Reference home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>multimap</H2>
<HR><PRE>     Container</PRE><HR>
<A NAME="Summary"><H3>Summary</H3></A>
<P>An associative container providing access to non-key values using keys.  <B><I>multimap</B></I> keys are not required to be unique.  A <B><I>multimap</B></I> supports bidirectional iterators.</P>
<H3>Contents</H3>
<UL>
<A HREF="#Synopsis"><LI>Synopsis</LI></A>
<A HREF="#Description"><LI>Description</LI></A>
<A HREF="#Interface"><LI>Interface</LI></A>
<A HREF="#Constructors and Destructors"><LI>Constructors and Destructors</LI></A>
<A HREF="#Assignment Operator"><LI>Assignment Operator</LI></A>
<A HREF="#Allocator"><LI>Allocator</LI></A>
<A HREF="#Iterators"><LI>Iterators</LI></A>
<A HREF="#Member Functions"><LI>Member Functions</LI></A>
<A HREF="#Non-member Operators"><LI>Non-member Operators</LI></A>
<A HREF="#Example"><LI>Example</LI></A>
<A HREF="#Warnings"><LI>Warnings</LI></A>
<A HREF="#See Also"><LI>See Also</LI></A>
</UL>
<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>#include &#60;map></PRE>
<PRE>
template &#60;class Key, class T, class Compare = less&#60;Key>,
          class Allocator = allocator>
class <B>multimap</B> ;
</PRE>
<A NAME="Description"><H3>Description</H3></A>
<P><B><I>multimap &#60;Key ,T, Compare, Allocator></B></I> provides fast access to stored values of type <SAMP>T </SAMP>which are indexed by keys of type <SAMP>Key</SAMP>.  The default operation for key comparison is the <SAMP>&#60;</SAMP> operator.  Unlike <A HREF="map_8018.htm"><B><I>map</B></I></A>, <B><I>multimap</B></I> allows insertion of duplicate keys. </P>
<P><B><I>multimap</B></I> provides bidirectional iterators which point to  an instance of <SAMP>pair&#60;const Key x, T y></SAMP> where <SAMP>x</SAMP> is the key and <SAMP>y</SAMP> is the stored value associated with that key.   The  definition of <B><I>multimap</B></I> provides a <SAMP>typedef</SAMP> to this pair called <SAMP>value_type</SAMP>. </P>
<P>The types used for both the template parameters  <SAMP>Key</SAMP>  and <SAMP>T</SAMP> must provide the following (where <SAMP>T</SAMP> is the <SAMP>type</SAMP>, <SAMP>t</SAMP> is a value of <SAMP>T</SAMP> and <SAMP>u</SAMP> is a <SAMP>const</SAMP> <SAMP>value</SAMP> of <SAMP>T</SAMP>): </P>
<PRE>  Copy constructors -  T(t) and T(u)
  Destructor        -  t.~T()
  Address of        -  &#38;t and &#38;u yielding T* and
                       const T* respectively
  Assignment        -  t = a where a is a
                       (possibley const) value of T
</PRE><P>The type used for the <SAMP>Compare</SAMP> template parameter must satisfy the requirements for binary functions.</P>
<A NAME="Interface"><H3>Interface</H3></A>
<PRE>template &#60;class Key, class T, class Compare = less&#60;Key>,
          class Allocator = allocator>
 class multimap {

public:
// types
   typedef Key key_type;
   typedef T mapped_type;
   typedef pair&#60;const Key, T> value_type;
   typedef Compare key_compare;
   typedef Allocator allocator_type;
   typename reference;
   typename const_reference;
   typename iterator;
   typename const_iterator;
   typename size_type;
   typename difference_type;
   typename reverse_iterator;
   typename const_reverse_iterator;
 class value_compare
    : public binary_function&#60;value_type, value_type, bool> 
    {
     friend class multimap&#60;Key, T, Comapare, Allocator>;
     public :
       bool operator() (const value_type&#38;, const value_type&#38;) const;
    };
// Construct/Copy/Destroy
   explicit multimap (const Compare&#38; = Compare(), const Allocator&#38; = 
                      Allocator());
   template &#60;class InputIterator>
    multimap (InputIterator, InputIterator,
              const Compare&#38; = Compare(),
              const Allocator&#38; = Allocator());
   multimap (const multimap&#60;Key, T, Compare, Allocator>&#38;);
   ~multimap ();
   multimap&#60;Key, T, Compare, Allocator>&#38; operator=
       (const multimap&#60;Key, T, Compare, Allocator>&#38;);
// Iterators
   iterator begin ();
   const_iterator begin () const;
   iterator end ();
   const_iterator end () const;
   reverse_iterator rbegin ();
   const_reverse_iterator rbegin () const;
   reverse_iterator rend ();
   const_reverse_iterator rend () const;
// Capacity
   bool empty () const;
   size_type size () const;
   size_type max_size () const;
// Modifiers
   iterator insert (const value_type&#38;);
   iterator insert (iterator, const value_type&#38;);
   template &#60;class InputIterator>
    void insert (InputIterator, InputIterator);
   iterator erase (iterator);
   size_type erase (const key_type&#38;);
   iterator erase (iterator, iterator);
   void swap (multimap&#60;Key, T, Compare, Allocator>&#38;);
// Observers
   key_compare key_comp () const;
   value_compare value_comp () const;
// Multimap operations
   iterator find (const key_type&#38;);
   const_iterator find (const key_type&#38;) const;
   size_type count (const key_type&#38;) const;
   iterator lower_bound (const key_type&#38;);
   const_iterator lower_bound (const key_type&#38;) const;
   iterator upper_bound (const key_type&#38;);
   const_iterator upper_bound (const key_type&#38;) const;
   pair&#60;iterator, iterator> equal_range (const key_type&#38;);
   pair&#60;const_iterator, const_iterator> 
     equal_range (const key_type&#38;) const;
};
// Non-member Operators
template &#60;class Key, class T,class Compare, class Allocator>
 bool operator== (const multimap&#60;Key, T, Compare, Allocator>&#38;,
                  const multimap&#60;Key, T, Compare, Allocator>&#38;);
template &#60;class Key, class T, class Compare, class Allocator>
 bool operator&#60; (const multimap&#60;Key, T, Compare, Allocator>&#38;,
                 const multimap&#60;Key, T, Compare, Allocator>&#38;);
// Specialized Algorithms
template &#60;class Key, class T, class Compare, class Allocator>
 void swap (multimap&#60;Key, T, Compare, Allocator>&#38;,
            multimap&#60;Key, T, Compare, Allocator>&#38;;
</PRE>
<A NAME="Constructors and Destructors"><H3>Constructors and Destructors</H3></A>
<PRE>explicit <B>multimap</B> (const Compare&#38; comp = Compare(),
                   const Allocator&#38; alloc = Allocator());</PRE>
<UL><P>Default constructor.  Constructs an empty multimap that will use the optional relation <SAMP>comp</SAMP> to order keys and the allocator <SAMP>alloc</SAMP> for all storage management.</P>
</UL>
<PRE>template &#60;class InputIterator>
<B>multimap</B> (InputIterator first,
          InputIterator last,
          const Compare&#38; comp = Compare()
          const Allocator&#38; alloc = Allocator ());</PRE>
<UL><P>Constructs a multimap containing values in  the  range <SAMP>[first, last)</SAMP>.   Creation of the new multimap is only guaranteed to succeed if the iterators <SAMP>first</SAMP> and  <SAMP>last</SAMP> return values of type<SAMP> pair&#60;class Key, class T>.</SAMP></P>
</UL>
<PRE><B>multimap</B> (const multimap&#60;Key, T, Compare, Allocator>&#38; x);</PRE>
<UL><P>Copy constructor.  Creates a new multimap by copying all pairs of <SAMP>key</SAMP> and <SAMP>value</SAMP> from <SAMP>x</SAMP>.</P>
</UL>
<PRE><B>~multimap</B> ();</PRE>
<UL><P>The destructor.  Releases any allocated memory for this multimap.</P>
</UL>
<A NAME="Assignment Operator"><H3>Assignment Operator</H3></A>
<PRE>multimap&#60;Key, T, Compare, Allocator>&#38; 
<B>operator=</B> (const multimap&#60;Key, T, Compare, Allocator>&#38; x);</PRE>
<UL><P>Replaces the contents of <SAMP>*this</SAMP> with a copy of the multimap<SAMP> x</SAMP>.</P>
</UL>
<A NAME="Allocator"><H3>Allocator</H3></A>
<PRE>allocator_type <B>get_allocator </B>() const;</PRE>
<UL><P>Returns a copy of the allocator used by self for storage management.</P>
</UL>
<A NAME="Iterators"><H3>Iterators</H3></A>
<PRE>iterator <B>begin</B>() ;</PRE>
<UL><P>Returns a bidirectional <SAMP>iterator</SAMP> pointing to the first element  stored in the multimap.  "First" is defined by the multimap's comparison operator, <SAMP>Compare</SAMP>.</P>
</UL>
<PRE>const_iterator <B>begin</B>() const;</PRE>
<UL><P>Returns a<SAMP> const_iterator</SAMP> pointing to the first element stored in the multimap. "First" is defined by the multimap's comparison operator, <SAMP>Compare</SAMP>.</P>
</UL>
<PRE>iterator <B>end</B>() ;</PRE>
<UL><P>Returns a bidirectional <SAMP>iterator</SAMP> pointing to the last element  stored in the multimap, i.e. the off-the-end value.</P>
</UL>
<PRE>const_iterator <B>end</B>() const;</PRE>
<UL><P>Returns a <SAMP>const_iterator</SAMP> pointing to the last element stored in the multimap.</P>
</UL>
<PRE>reverse_iterator <B>rbegin</B>() ;</PRE>
<UL><P>Returns a <SAMP>reverse_iterator</SAMP> pointing to the first element stored in the multimap.  "First" is defined by the multimap's comparison operator, <SAMP>Compare</SAMP>.</P>
</UL>
<PRE>const_reverse_iterator <B>rbegin</B>() const;</PRE>
<UL><P>Returns a <SAMP>const_reverse_iterator</SAMP> pointing to the first element stored in the multimap.</P>
</UL>
<PRE>reverse_iterator <B>rend</B>() ;</PRE>
<UL><P>Returns a <SAMP>reverse_iterator</SAMP> pointing to the last element stored in the multimap, i.e., the off-the-end value.</P>
</UL>
<PRE>const_reverse_iterator <B>rend</B>() const;</PRE>
<UL><P>Returns a <SAMP>const_reverse_iterator</SAMP> pointing to the last element stored in the multimap.</P>
</UL>
<A NAME="Member Functions"><H3>Member Functions</H3></A>
<PRE>void
<B>clear</B> ();</PRE>
<UL><P>Erases all elements from the self.</P>
</UL>
<PRE>size_type 
<B>count</B> (const key_type&#38; x) const;</PRE>
<UL><P>Returns the number of elements in the multimap with the key value <SAMP>x</SAMP>.</P>
</UL>
<PRE>bool 
<B>empty</B>() const;</PRE>
<UL><P>Returns <SAMP>true</SAMP> if the multimap is empty, <SAMP>false</SAMP> otherwise.</P>
</UL>
<PRE>pair&#60;iterator,iterator> 
<B>equal_range </B>(const key_type&#38; x);
pair&#60;const_iterator,const_iterator> 
<B>equal_range</B> (const key_type&#38; x) const;</PRE>
<UL><P>Returns the pair<SAMP> (lower_bound(x), upper_bound(x))</SAMP>.</P>
</UL>
<PRE>iterator
<B>erase</B> (iterator first, iterator last);</PRE>
<UL><P>Providing the iterators <SAMP>first</SAMP> and <SAMP>last</SAMP> point to the same multimap and last is reachable from first, all elements in the range (<SAMP>first, last</SAMP>) will be deleted from the multimap. Returns an <SAMP>iterator</SAMP> pointing to the element following the last deleted element, or <SAMP>end(),</SAMP> if there were no elements after the deleted range.</P>
</UL>
<PRE>iterator
<B>erase</B> (iterator position);</PRE>
<UL><P>Deletes the multimap element pointed to by the iterator <SAMP>position</SAMP>. Returns an <SAMP>iterator</SAMP> pointing to the element following the deleted element, or <SAMP>end(), </SAMP>if the deleted item was the last one in this list.</P>
</UL>
<PRE>size_type 
<B>erase</B> (const key_type&#38; x);</PRE>
<UL><P>Deletes the elements with the key value <SAMP>x</SAMP> from the map, if any exist. Returns the number of deleted elements, or  0 otherwise. </P>
</UL>
<PRE>iterator 
<B>find</B> (const key_type&#38; x);</PRE>
<UL><P>Searches the multimap for a pair with the key value <SAMP>x</SAMP> and  returns an <SAMP>iterator</SAMP> to that pair if it is found.  If such a pair is not found the value <SAMP>end() </SAMP> is returned.</P>
</UL>
<PRE>const_iterator 
<B>find</B> (const key_type&#38; x) const;</PRE>
<UL><P>Same as find above but returns a <SAMP>const_iterator</SAMP>.</P>
</UL>
<PRE>iterator 
<B>insert</B> (const value_type&#38; x);
iterator 
<B>insert</B> (iterator position, const value_type&#38; x);</PRE>
<UL><P><SAMP>x</SAMP> is inserted into the multimap.  A position may be supplied as a hint regarding where to do the insertion.  If the insertion may be done right after <SAMP>position</SAMP>  then it takes amortized constant time.  Otherwise it will take <SAMP>O(log N)</SAMP> time.</P>
</UL>
<PRE>template &#60;class InputIterator>
void 
<B>insert</B> (InputIterator first, InputIterator last);</PRE>
<UL><P>Copies of each element in the range <SAMP>[first, last)</SAMP> will be inserted into the multimap.  The iterators <SAMP>first</SAMP> and <SAMP>last</SAMP> must return values of type <SAMP>pair&#60;T1,T2></SAMP>.  This operation takes approximately <SAMP>O(N*log(size()+N))</SAMP> time.</P>
</UL>
<PRE>key_compare 
<B>key_comp</B>() const;</PRE>
<UL><P>Returns a function object capable of comparing key values using the comparison operation, <SAMP>Compare</SAMP>, of the current multimap.</P>
</UL>
<PRE>iterator 
<B>lower_bound </B>(const key_type&#38; x);</PRE>
<UL><P>Returns an <SAMP>iterator</SAMP> to the  first  multimap element whose key  is greater  than or equal to <SAMP>x</SAMP>.  If no such element exists then <SAMP>end()</SAMP> is returned.</P>
</UL>
<PRE>const_iterator 
<B>lower_bound </B>(const key_type&#38; x) const;</PRE>
<UL><P>Same as <SAMP>lower_bound</SAMP> above but returns a <SAMP>const_iterator.</SAMP></P>
</UL>
<PRE>size_type 
<B>max_size</B>() const;</PRE>
<UL><P>Returns the maximum possible size of the multimap.</P>
</UL>
<PRE>size_type 
<B>size</B>() const;</PRE>
<UL><P>Returns the number of elements in the multimap.</P>
</UL>
<PRE>void 
<B>swap</B> (multimap&#60;Key, T, Compare, Allocator>&#38; x);</PRE>
<UL><P>Swaps the contents of the multimap <SAMP>x </SAMP>with the current multimap, <SAMP>*this</SAMP>.</P>
</UL>
<PRE>iterator
<B>upper_bound</B> (const key_type&#38; x);</PRE>
<UL><P>Returns an <SAMP>iterator</SAMP> to the first element  whose key is less than  or equal to <SAMP>x</SAMP>.  If no such element exists, then <SAMP>end()</SAMP> is returned.</P>
</UL>
<PRE>const_iterator 
<B>upper_bound </B>(const key_type&#38; x) const;</PRE>
<UL><P>Same as <SAMP>upper_bound</SAMP> above but returns a <SAMP>const_iterator</SAMP>.</P>
</UL>
<PRE>value_compare 
<B>value_comp</B>() const;</PRE>
<UL><P>Returns a function object capable of comparing <SAMP>value_types</SAMP>  (<SAMP>key,value</SAMP>  pairs) using the comparison operation, <SAMP>Compare</SAMP>, of the current multimap.</P>
</UL>
<A NAME="Non-member Operators"><H3>Non-member Operators</H3></A>
<PRE>bool 
<B>operator==</B>(const multimap&#60;Key, T, Compare, Allocator>&#38; x,
           const multimap&#60;Key, T, Compare, Allocator>&#38; y);</PRE>
<UL><P>Returns <SAMP>true</SAMP> if all  elements in <SAMP>x</SAMP> are element-wise equal to all elements in <SAMP>y</SAMP>, using<SAMP> (T::operator==). </SAMP>Otherwise it returns <SAMP>false</SAMP>.</P>
</UL>
<PRE>bool 
<B>operator&#60;</B> (const multimap&#60;Key, T, Compare, Allocator>&#38; x,
           const multimap&#60;Key, T, Compare, Allocator>&#38; y);</PRE>
<UL><P>Returns <SAMP>true</SAMP> if <SAMP>x</SAMP> is lexicographically less than <SAMP>y</SAMP>.  Otherwise, it returns <SAMP>false</SAMP>.</P>
</UL>
<PRE>template&#60;class Key, class T, class Compare, class Allocator>
void <B>swap</B> (multimap&#60;Key, T, Compare, Allocator>&#38; a,
           multimap&#60;Key, T, Compare, Allocator>&#38; b);</PRE>
<UL><P>Efficiently swaps the contents of <SAMP>a</SAMP> and <SAMP>b</SAMP>.</P>
</UL>
<A NAME="Example"><H3>Example</H3></A>
<PRE>//
// multimap.cpp
//
 #include &#60;string>
 #include &#60;map>
 #include &#60;iostream.h>
 typedef <B>multimap</B>&#60;int, string, less&#60;int> > months_type;
 // Print out a pair
 template &#60;class First, class Second>
 ostream&#38; operator&#60;&#60;(ostream&#38; out, 
                     const pair&#60;First,Second>&#38; p)
 {
   cout &#60;&#60; p.second &#60;&#60; " has " &#60;&#60; p.first &#60;&#60; " days";
   return out;
 }
 // Print out a multimap
 ostream&#38; operator&#60;&#60;(ostream&#38; out, months_type l)
 {
   copy(l.begin(),l.end(), ostream_iterator
                &#60;months_type::value_type>(cout,"\n"));
   return out;
 }
 int main(void)
 {
   // create a multimap of months and the number of 
   // days in the month
   months_type months;
   typedef months_type::value_type value_type;
  
   // Put the months in the multimap
   months.insert(value_type(31, string("January")));
   months.insert(value_type(28, string("Febuary")));
   months.insert(value_type(31, string("March")));
   months.insert(value_type(30, string("April")));
   months.insert(value_type(31, string("May")));
   months.insert(value_type(30, string("June")));
   months.insert(value_type(31, string("July")));
   months.insert(value_type(31, string("August")));
   months.insert(value_type(30, string("September")));
   months.insert(value_type(31, string("October")));
   months.insert(value_type(30, string("November")));
   months.insert(value_type(31, string("December")));
   // print out the months
   cout &#60;&#60; "All months of the year" &#60;&#60; endl &#60;&#60; months &#60;&#60; endl;
   // Find the Months with 30 days
   pair&#60;months_type::iterator,months_type::iterator> p = 
          months.equal_range(30);
   // print out the 30 day months 
   cout &#60;&#60; endl &#60;&#60; "Months with 30 days" &#60;&#60; endl;
   copy(p.first,p.second,
        ostream_iterator&#60;months_type::value_type>(cout,"\n"));
  
   return 0;
 }
Output :
All months of the year
February has 28 days
April has 30 days
June has 30 days
September has 30 days
November has 30 days
January has 31 days
March has 31 days
May has 31 days
July has 31 days 
August has 31 days
October has 31 days
December has 31 days
Months with 30 days
April has 30 days
June has 30 days
September has 30 days
November has 30 days
</PRE>
<A NAME="Warnings"><H3>Warnings</H3></A>
<P>Member function templates are used in all containers provided by the Standard Template Library.  An example of this feature is the constructor for <B><I>multimap&#60;Key,T,Compare,Allocator></B></I>  that takes two templated iterators:</P>
<PRE></PRE>
<PRE>template &#60;class InputIterator>
 multimap (InputIterator, InputIterator, 
           const Compare&#38; = Compare(),
           const Allocator&#38; = Allocator());
</PRE><P><B><I>multimap</B></I> also has an <SAMP>insert</SAMP> function of this type.  These functions, when not restricted by compiler limitations, allow you to use any type of  input iterator as arguments. For compilers that do not support this feature we provide substitute functions that allow you to use an iterator obtained from the same type of container as the one you are constructing (or calling a member function on), or you can use a pointer to the type of element you have in the container.</P>
<P>For example, if your compiler does not support member function templates you can construct a multimap in the following two ways: </P>
<PRE>multimap&#60;int, int, less&#60;int>, allocator>::value_type intarray[10];
multimap&#60;int, int, less&#60;int>, allocator> first_map(intarry, 
                                                 intarray + 10);
multimap&#60;int, int, less&#60;int>, allocator>   
  second_multimap(first_multimap.begin(), first_multimap.end());
</PRE>
<P>but not this way:</P>
<PRE>multimap&#60;long, long, less&#60;long>, allocator>
  long_multimap(first_multimap.begin(),first_multimap.end());
</PRE><P>since the <SAMP>long_multimap</SAMP> and <SAMP>first_multimap </SAMP>are not the same type.</P>
<P>Also, many compilers do not support default template arguments.  If your compiler is one of these you need to always supply the <SAMP>Compare</SAMP> template argument and the <SAMP>Allocator</SAMP> template argument. For instance you'll have to write:</P>
<PRE>multimap&#60;int, int, less&#60;int>, allocator></PRE>
<P>instead of:</P>
<PRE>multimap&#60;int, int></PRE>
<A NAME="See Also"><H3>See Also</H3></A>
<P><A HREF="all_7029.htm"><B><I>allocator</B></I></A>, <A HREF="Con_2487.htm"><B><I>Containers</B></I></A>, <A HREF="Ite_5295.htm"><B><I>Iterators</B></I></A>, <A HREF="map_8018.htm"><B><I>map</B></I></A></P>
<HR>
<A HREF="mod_6765.htm"><IMG SRC="images/prev.gif"></A> <A HREF="ref.htm#contents"><IMG SRC="images/toc.gif"></A> <A HREF="mul_0958.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
