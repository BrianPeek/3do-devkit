<HTML><TITLE>set</TITLE><BODY>
<A HREF="ref.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the Class Reference home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>set</H2>
<HR><PRE>     Container</PRE><HR>
<A NAME="Summary"><H3>Summary</H3></A>
<P>An associative container that supports unique keys.  A <B><I>set</B></I> supports bidirectional iterators.</P>
<H3>Contents</H3>
<UL>
<A HREF="#Synopsis"><LI>Synopsis</LI></A>
<A HREF="#Description"><LI>Description</LI></A>
<A HREF="#Interface"><LI>Interface</LI></A>
<A HREF="#Constructors and Destructors"><LI>Constructors and Destructors</LI></A>
<A HREF="#Assignment Operator"><LI>Assignment Operator</LI></A>
<A HREF="#Allocator"><LI>Allocator</LI></A>
<A HREF="#Iterators"><LI>Iterators</LI></A>
<A HREF="#Member Functions"><LI>Member Functions</LI></A>
<A HREF="#Non-member Operators"><LI>Non-member Operators</LI></A>
<A HREF="#Example"><LI>Example</LI></A>
<A HREF="#Warnings"><LI>Warnings</LI></A>
<A HREF="#See Also"><LI>See Also</LI></A>
</UL>
<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>#include &#60;set></PRE>
<PRE>
template &#60;class Key, class Compare = less&#60;Key>,
  class Allocator = allocator>
class <B>set</B> ;
</PRE>
<A NAME="Description"><H3>Description</H3></A>
<P><B><I>set&#60;Key, Compare, Allocator> </B></I>is an associative container that supports unique keys and provides for fast retrieval of the keys.  A <B><I>set</B></I> contains at most one of any key value.  The keys are sorted using <SAMP>Compare</SAMP>. </P>
<P>Since a <B><I>set</B></I> maintains a total order on its elements, you cannot alter the key values directly.  Instead, you must insert new elements with an<SAMP> insert_iterator</SAMP>. </P>
<P>Any type used for the template parameter <SAMP>Key</SAMP> must provide the following (where <SAMP>T</SAMP> is the <SAMP>type</SAMP>, <SAMP>t</SAMP> is a <SAMP>value</SAMP> of <SAMP>T</SAMP> and <SAMP>u</SAMP> is a <SAMP>const</SAMP> <SAMP>value</SAMP> of <SAMP>T</SAMP>):</P>
<PRE>  Copy constructors     T(t) and T(u)
  Destructor            t.~T()
  Address of            &#38;t and &#38;u yielding T* and
                        const T* respectively
  Assignment            t = a where a is a
                       (possibly const) value of T
</PRE><P>The <SAMP>type</SAMP> used for the <SAMP>Compare</SAMP> template parameter must satisfy the requirements for binary functions.</P>
<A NAME="Interface"><H3>Interface</H3></A>
<PRE>template &#60;class Key, class Compare = less&#60;Key>,
          class Allocator = allocator>
 class set {
public:
 // types
   typedef Key key_type;
   typedef Key value_type;
   typedef Compare key_compare;
   typedef Compare value_compare;
   typedef Allocator allocator_type;
   typename reference;
   typename const_reference;
   typename iterator;
   typename const_iterator;
   typename size_type;
   typename difference_type;
   typename reverse_iterator;
   typename const_reverse_iterator;
 // Construct/Copy/Destroy
   explicit set (const Compare&#38; = Compare(), 
                 const Allocator&#38; = Allocator ());
   template &#60;class InputIterator>
    set (InputIterator, InputIterator, const Compare&#38; = Compare(),
         const Allocator&#38; = Allocator ());
   set (const set&#60;Key, Compare, Allocator>&#38;);
   ~set ();
   set&#60;Key, Compare, Allocator>&#38; operator= (const set &#60;Key, Compare, 
                                                       Allocator>&#38;);
   allocator_type get_allocator () const;
 // Iterators
   iterator begin ();
   const_iterator begin () const;
   iterator end ();
   const_iterator end () const;
   reverse_iterator rbegin ();
   const_reverse_iterator rbegin () const;
   reverse_iterator rend ();
   const_reverse_iterator rend () const;
 // Capacity
   bool empty () const;
   size_type size () const;
   size_type max_size () const;
 // Modifiers
   pair&#60;iterator, bool> insert (const value_type&#38;);
   iterator insert (iterator, const value_type&#38;);
   template &#60;class InputIterator>
    void insert (InputIterator, InputIterator);
   iterator erase (iterator);
   size_type erase (const key_type&#38;);
   iterator erase (iterator, iterator);
   void swap (set&#60;Key, Compare, Allocator>&#38;);
   void clear ();
 // Observers
   key_compare key_comp () const;
   value_compare value_comp () const;
 // Set operations
   size_type count (const key_type&#38;) const;
   pair&#60;iterator, iterator> equal_range (const  key_type&#38;) const;
   iterator find (const key_type&#38;) const;
   iterator lower_bound (const key_type&#38;) const;
   iterator upper_bound (const key_type&#38;) const
};
 // Non-member Operators
template &#60;class Key, class Compare, class Allocator>
 bool operator== (const set&#60;Key, Compare, Allocator>&#38;,
                  const set&#60;Key, Compare, Allocator>&#38;);
template &#60;class Key, class Compare, class Allocator>
 bool operator&#60; (const set&#60;Key, Compare, Allocator>&#38;,
                 const set&#60;Key, Compare, Allocator>&#38;);
// Specialized Algorithms
template &#60;class Key, class Compare, class Allocator>
void swap (set &#60;Key, Compare, Allocator>&#38;,
           set &#60;Key, Compare, Allocator>&#38;);
</PRE>
<A NAME="Constructors and Destructors"><H3>Constructors and Destructors</H3></A>
<PRE>explicit 
<B>set</B> (const Compare&#38; comp = Compare(),
     const Allocator&#38; alloc = Allocator ());</PRE>
<UL><P>The default constructor.  Creates a set of zero elements.  If the function object <SAMP>comp</SAMP> is supplied, it is used to compare elements of the set.   Otherwise, the default function object in the template argument is used.  The template argument defaults to <SAMP>less (&#60;)</SAMP>. The allocator <SAMP>alloc</SAMP> is used for all storage management.</P>
</UL>
<PRE>template &#60;class InputIterator>
<B>set</B> (InputIterator first, InputIterator last, 
     const Compare&#38; comp = Compare ()
     const Allocator&#38; alloc = Allocator());</PRE>
<UL><P>Creates a set of length <SAMP>last - first</SAMP>, filled with all values obtained by dereferencing the <SAMP>InputIterators</SAMP> on the range <SAMP>[first, last)</SAMP>.  If the function object <SAMP>comp</SAMP> is supplied, it is used to compare elements of the set.  Otherwise, the default function object in the template argument is used.  The template argument defaults to <SAMP>less (&#60;)</SAMP>. Uses the allocator <SAMP>alloc</SAMP> for all storage management. </P>
</UL>
<PRE><B>set</B> (const set&#60;Key, Compare, Allocator>&#38; x);</PRE>
<UL><P>Copy constructor. Creates a copy of <SAMP>x</SAMP>.</P>
</UL>
<PRE><B>~set</B> ();</PRE>
<UL><P>The destructor.  Releases any allocated memory for self.</P>
</UL>
<A NAME="Assignment Operator"><H3>Assignment Operator</H3></A>
<PRE>set&#60;Key, Compare, Allocator>&#38; 
<B>operator=</B> (const set&#60;Key, Compare, Allocator>&#38; x);</PRE>
<UL><P>Assignment operator.  Self will share an implementation with <SAMP>x</SAMP>.  Returns a reference to self.</P>
</UL>
<A NAME="Allocator"><H3>Allocator</H3></A>
<PRE>allocator_type <B>get_allocator</B> () const;</PRE>
<UL><P>Returns a copy of the allocator used by self for storage management.</P>
</UL>
<A NAME="Iterators"><H3>Iterators</H3></A>
<PRE>iterator <B>begin</B> ();</PRE>
<UL><P>Returns an <SAMP>iterator</SAMP> that points to the first element in self.</P>
</UL>
<PRE>const_iterator <B>begin</B> () const;</PRE>
<UL><P>Returns a <SAMP>const_iterator</SAMP> that points to the first element in self.</P>
</UL>
<PRE>iterator <B>end</B> ();</PRE>
<UL><P>Returns an <SAMP>iterator</SAMP> that points to the past-the-end value.</P>
</UL>
<PRE>const_iterator <B>end</B> () const;</PRE>
<UL><P>Returns a <SAMP>const_iterator</SAMP> that points to the past-the-end value.</P>
</UL>
<PRE>reverse_iterator <B>rbegin</B> ();</PRE>
<UL><P>Returns a <SAMP>reverse_iterator</SAMP> that points to the past-the-end value.</P>
</UL>
<PRE>const_reverse_iterator <B>rbegin</B> () const;</PRE>
<UL><P>Returns a <SAMP>const_reverse_iterator</SAMP> that points to the past-the-end value.</P>
</UL>
<PRE>reverse_iterator <B>rend</B> ();</PRE>
<UL><P>Returns a <SAMP>reverse_iterator</SAMP> that points to the first element.</P>
</UL>
<PRE>const_reverse_iterator <B>rend</B> () const;</PRE>
<UL><P>Returns a <SAMP>const_reverse_iterator</SAMP> that points to the first element.</P>
</UL>
<A NAME="Member Functions"><H3>Member Functions</H3></A>
<PRE>void
<B>clear</B> ();</PRE>
<UL><P>Erases all elements from the set.</P>
</UL>
<PRE>size_type 
<B>count</B> (const key_type&#38; x) const;</PRE>
<UL><P>Returns the number of elements equal to <SAMP>x</SAMP>.  Since a set supports unique keys, <SAMP>count</SAMP> will always return 1 or 0.</P>
</UL>
<PRE>bool 
<B>empty</B> () const;</PRE>
<UL><P>Returns <SAMP>true</SAMP> if the size is zero.</P>
</UL>
<PRE>pair&#60;iterator, iterator> 
<B>equal_range</B> (const key_type&#38;  x) const;</PRE>
<UL><P>Returns <SAMP>pair(lower_bound(x),upper_bound(x))</SAMP>.  The <SAMP>equal_range</SAMP> function indicates the valid range for insertion of <SAMP>x</SAMP> into the set.</P>
</UL>
<PRE>size_type 
<B>erase</B> (const key_type&#38; x);</PRE>
<UL><P>Deletes all the elements matching <SAMP>x</SAMP>.   Returns the number of elements erased.  Since a set supports unique keys, <SAMP>erase</SAMP> will always return 1 or 0.</P>
</UL>
<PRE>iterator
<B>erase</B> (iterator position);</PRE>
<UL><P>Deletes the map element pointed to by the iterator <SAMP>position</SAMP>. Returns an <SAMP>iterator</SAMP> pointing to the element following the deleted element, or <SAMP>end()</SAMP> if the deleted item was the last one in this list.</P>
</UL>
<PRE>iterator
<B>erase</B> (iterator first, iterator last);</PRE>
<UL><P>Deletes the elements in the range (<SAMP>first, last</SAMP>). Returns an <SAMP>iterator</SAMP> pointing to the element following the last deleted element, or <SAMP>end()</SAMP> if there were no elements after the deleted range.</P>
</UL>
<PRE>iterator 
<B>find</B> (const key_value&#38; x) const;</PRE>
<UL><P>Returns an <SAMP>iterator</SAMP> that points to the element equal to <SAMP>x</SAMP>.  If there is no such element, the iterator points to the past-the-end value.</P>
</UL>
<PRE>pair&#60;iterator, bool> 
<B>insert</B> (const value_type&#38; x);</PRE>
<UL><P>Inserts <SAMP>x</SAMP> into self according to the comparison function object.  The template's default comparison function object is <SAMP>less (&#60;)</SAMP>. If the insertion succeeds, it returns a pair composed of the iterator position where the insertion took place, and <SAMP>true</SAMP>.  Otherwise, the pair contains the end value, and <SAMP>false</SAMP>.</P>
</UL>
<PRE>iterator 
<B>insert</B> (iterator position, const value_type&#38; x);</PRE>
<UL><P><SAMP>x</SAMP> is inserted into the set. A position may be supplied as a hint regarding where to do the insertion. If the insertion may be done right after position then it takes amortized constant time. Otherwise it will take <SAMP>0 (log N)</SAMP> time. The return value points to the inserted <SAMP>x</SAMP>.</P>
</UL>
<PRE>template &#60;class InputIterator>
void 
<B>insert</B>(InputIterator first, InputIterator last);</PRE>
<UL><P>Inserts copies of the elements in the range <SAMP>[first, last]</SAMP>.</P>
</UL>
<PRE>key_compare 
<B>key_comp </B>() const;</PRE>
<UL><P>Returns the comparison function object for the set.</P>
</UL>
<PRE>iterator 
<B>lower_bound</B> (const key_type&#38; x) const;</PRE>
<UL><P>Returns an <SAMP>iterator</SAMP> that points to the first element that is greater than or equal to <SAMP>x</SAMP>.  If there is no such element, the iterator points to the past-the-end value.</P>
</UL>
<PRE>size_type 
<B>max_size</B> () const;</PRE>
<UL><P>Returns size<SAMP> </SAMP>of the largest possible set.</P>
</UL>
<PRE>size_type 
<B>size</B> () const;</PRE>
<UL><P>Returns the number of elements.</P>
</UL>
<PRE>void 
<B>swap</B> (set&#60;Key, Compare, Allocator>&#38; x);</PRE>
<UL><P>Exchanges self with <SAMP>x</SAMP>.</P>
</UL>
<PRE>iterator 
<B>upper_bound</B> (const key_type&#38; x) const</PRE>
<UL><P>Returns an iterator that points to the first element that is greater than or equal to <SAMP>x</SAMP>.  If there is no such element, the iterator points to the past-the-end value.</P>
</UL>
<PRE>value_compare 
<B>value_comp</B> () const;</PRE>
<UL><P>Returns the set's comparison object. This is identical to the function <SAMP>key_comp()</SAMP>.</P>
</UL>
<A NAME="Non-member Operators"><H3>Non-member Operators</H3></A>
<PRE>template &#60;class Key, class Compare, class Allocator>
 bool <B>operator== </B>(const set&#60;Key, Compare, Allocator>&#38; x,
                  const set&#60;Key, Compare, Allocator>&#38; y);</PRE>
<UL><P>Equality operator. Returns <SAMP>true</SAMP> if <SAMP>x</SAMP> is the same as <SAMP>y</SAMP>.</P>
</UL>
<PRE>template &#60;class Key, class Compare, class Allocator>
bool <B>operator&#60; </B>(const set &#60;Key, Compare, Allocator>&#38; x,
                const set &#60;Key, Compare, Allocator>&#38; y);</PRE>
<UL><P>Returns true if the elements contained in <SAMP>x</SAMP> are lexicographically less than the elements contained in <SAMP>y</SAMP>.</P>
</UL>
<PRE>template &#60;class Key, class Compare, class Allocator>
void <B>swap</B> (set &#60;Key, Compare, Allocator>&#38; a,
           set &#60;Key, Compare, Allocator>&#38; b);</PRE>
<UL><P>Efficiently swaps the contents of <SAMP>a</SAMP> and <SAMP>b</SAMP>.</P>
</UL>
<A NAME="Example"><H3>Example</H3></A>
<PRE>//
// set.cpp
//
 #include &#60;set>
 #include &#60;iostream.h>
 typedef <B>set</B>&#60;double, less&#60;double>, allocator> set_type;
 ostream&#38; operator&#60;&#60;(ostream&#38; out, const set_type&#38; s)
 {
   copy(s.begin(), s.end(), 
        ostream_iterator&#60;set_type::value_type>(cout," "));
   return out;
 }
 int main(void)
 {
   // create a set of doubles
   set_type   sd;
   int         i;
   for(i = 0; i &#60; 10; ++i) {
     // insert values
     sd.insert(i);
   }
   // print out the set
   cout &#60;&#60; sd &#60;&#60; endl &#60;&#60; endl;
   // now let's erase half of the elements in the set
   int half = sd.size() >> 1;
   set_type::iterator sdi = sd.begin();
   advance(sdi,half);
   sd.erase(sd.begin(),sdi);
   // print it out again
   cout &#60;&#60; sd &#60;&#60; endl &#60;&#60; endl;
   // Make another set and an empty result set
   set_type sd2, sdResult;
   for (i = 1; i &#60; 9; i++)
      sd2.insert(i+5);
   cout &#60;&#60; sd2 &#60;&#60; endl;
   // Try a couple of set algorithms
   set_union(sd.begin(),sd.end(),sd2.begin(),sd2.end(),
             inserter(sdResult,sdResult.begin()));
   cout &#60;&#60; "Union:" &#60;&#60; endl &#60;&#60; sdResult &#60;&#60; endl;
   sdResult.erase(sdResult.begin(),sdResult.end());
   set_intersection(sd.begin(),sd.end(),
                    sd2.begin(),sd2.end(),
                    inserter(sdResult,sdResult.begin()));
   cout &#60;&#60; "Intersection:" &#60;&#60; endl &#60;&#60; sdResult &#60;&#60; endl;
  
   return 0;
 }
Output :
0 1 2 3 4 5 6 7 8 9
5 6 7 8 9
6 7 8 9 10 11 12 13
Union:
5 6 7 8 9 10 11 12 13
Intersection:
6 7 8 9
</PRE>
<A NAME="Warnings"><H3>Warnings</H3></A>
<P>Member function templates are used in all containers provided by the Standard Template Library.  An example of this feature is the constructor for set <SAMP>&#60;Key, Compare, Allocator></SAMP> that takes two templated iterators:</P>
<PRE>template &#60;class InputIterator>
 set (InputIterator, InputIterator,
      const Compare&#38; = Compare(),
      const Allocator&#38; = Allocator());
</PRE><P><B><I>set</B></I> also has an insert function of this type.  These functions, when not restricted by compiler limitations, allow you to use any type of input iterator as arguments.   For compilers that do not support this feature, we provide substitute functions that allow you to use an iterator obtained from the same type of container as the one you are constructing (or calling a member function on), or you can use a pointer to the type of element you have in the container.</P>
<P>For example, if your compiler does not support member function templates you can construct a set in the following two ways:</P>
<PRE>int intarray[10];
set&#60;int, less&#60;int>, allocator> first_set(intarray, intarray + 10);
set&#60;int, less&#60;int>, allocator> second_set(first_set.begin(),
                                          first_set.end());
</PRE><P>but not this way:</P>
<PRE>set&#60;long, less&#60;long>, allocator> long_set(first_set.begin(),
                                          first_set.end());
</PRE><P>since the <SAMP>long_set</SAMP> and <SAMP>first_set</SAMP> are not the same type.</P>
<P>Also, many compilers do not support default template arguments.  If your compiler is one of these you need to always supply the <SAMP>Compare</SAMP> template argument, and the <SAMP>Allocator</SAMP> template argument. For instance, you need to write :</P>
<P><SAMP>set&#60;int, less&#60;int>, allocator></SAMP></P>
<P>instead of :</P>
<P><SAMP>set&#60;int></SAMP></P>
<A NAME="See Also"><H3>See Also</H3></A>
<P><A HREF="all_7029.htm"><B><I>allocator</B></I></A>, <A HREF="Bid_7861.htm"><B><I>Bidirectional Iterators</B></I></A>, <A HREF="Con_2487.htm"><B><I>Containers</B></I></A>, <A HREF="lex_3806.htm"><B><I>lexicographical_compare</B></I></A></P>
<HR>
<A HREF="Seq_6405.htm"><IMG SRC="images/prev.gif"></A> <A HREF="ref.htm#contents"><IMG SRC="images/toc.gif"></A> <A HREF="set_0972.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
