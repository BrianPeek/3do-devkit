<HTML><HEAD><TITLE>Chapter 16:	 The Traits Parameter</TITLE></HEAD>
<BODY>
<A HREF="ug.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the user guide home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H1>Chapter 17:	 The Traits Parameter</H1>
<UL>
<A HREF="usi_7948.htm"><UL><LI>Using the Traits Technique</LI></UL></A>
</UL>
<P>Consider the following problem.  You have a matrix that must work for all types of numbers, but the behavior of the matrix depends, in at least some measure, on the type of <SAMP>number</SAMP>.  This means your matrix can't handle all numbers in the same way.</P>
<P>Except for the behavioral difference, it sounds like the perfect problem for a template.  But you can't hang extra information on the number type because it's often just a built-in type, so you can't use a single template.  The template will do the same thing for every number type, which is just what we can't do in this case.  You could specialize, but then you have to re-implement the entire matrix class for every type of number.  It may well be that most of the class is the same.  Worse yet, if you want to leave your interface open for use with some unknown future type, you're requiring that future user to reimplement the entire class as well. </P>
<P>What you really want is to put everything that doesn't change in one place, and repeatedly specify only the small part that does change with the type.  The technique for doing this is generally referred to as using a <I>traits</I> <I>parameter</I>.</P>
<HR>
<A HREF="tip_9088.htm"><IMG SRC="images/prev.gif"></A> <A HREF="booktoc.htm"><IMG SRC="images/toc.gif"></A> <A HREF="usi_7948.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
