<HTML><HEAD><TITLE>How Should I Use the Standard C++ Library?</TITLE></HEAD>
<BODY>
<A HREF="ug.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the user guide home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>How Should I Use the Standard C++ Library?</H2>
<P>Within a few years the Standard C++ Library will be the standard set of classes and libraries delivered with all ANSI-conforming C++ compilers. We have noted that the design of a large portion of the Standard C++ Library is in many ways not object-oriented.  On the other hand, C++ excels as a language for manipulating objects.   How do we integrate the Standard Library's non-object-oriented architecture with C++'s strengths as a language for manipulating objects?</P>
<P>The key is to use the right tool for each task.  Object-oriented design methods and programming techniques are almost without peer as guideposts in the development of large, complex software.  For the large majority of programming tasks, object-oriented techniques will remain the preferred approach.  And products such as Rogue Wave's <I>Tools.h++ 7.0</I>, which encapsulates the Standard C++ Library with a familiar object-oriented interface, will provide you with the power of the Library and the advantages of object-orientation. </P>
<P>Use Standard C++ Library components directly when you need flexibility and/or highly efficient code.  Use the more traditional approaches to object-oriented design, such as encapsulation and inheritance, when you need to model larger problem domains, and knit all the pieces into a full solution.  When you need to devise an architecture for your application, <I>always</I> consider the use of encapsulation and inheritance to compartmentalize the problem.  But if you discover that you need an efficient data structure or algorithm for a compact problem, such as data stream manipulation in drivers (the kind of problem that often resolves to a single class), look to the Standard C++ Library.  The Standard C++ Library excels in the creation of reusable classes, where low-level constructs are needed, while traditional OOP techniques really shine when those classes are combined to solve a larger problem.</P>
<P>In the future, most libraries will use the Standard C++ Library as their foundation.  By using the Standard C++ Library, either directly or through an encapsulation such as <I>Tools.h++ 7.0</I>, you help ensure interoperability.  This is especially important in large projects that may rely on communication between several libraries.  A good rule of thumb is to use the highest encapsulation level available to you, but make sure that the Standard C++ Library is available as the base for interlibrary communication and operation. </P>
<P>The C++ language supports a wide range of programming approaches because the problems we need to solve require that range.  The language, and now the Standard C++ library that supports it, are designed to give you the power to approach each unique problem from the best possible angle.  The Standard C++ Library, when combined with more traditional OOP techniques, puts a very flexible tool into the hands of anyone building a collection of C++ classes, whether those classes are intended to stand alone as a library or are tailored to a specific task.</P>
<HR>
<A HREF="wha_3608.htm"><IMG SRC="images/prev.gif"></A> <A HREF="booktoc.htm"><IMG SRC="images/toc.gif"></A> <A HREF="rea_7538.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
