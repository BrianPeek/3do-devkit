<HTML><HEAD><TITLE>Searching Operations</TITLE></HEAD>
<BODY>
<A HREF="ug.htm"><IMG SRC="images/banner.gif"></A>
<P><STRONG>Click on the banner to return to the user guide home page.</STRONG></P>
<P>&copy;Copyright 1996 Rogue Wave Software</P>
<H2>Searching Operations</H2>
<P>The next category of algorithms we will describe are those that are used to locate elements within a sequence that satisfy certain properties.  Most commonly the result of a search is then used as an argument to a further operation, such as a <SAMP>copy </SAMP>(<i><a href="inp_4704.htm#partitionasequenceintotwogroups">Chapter 13: Partition a Sequence into Two Groups</a></i>), a <SAMP>partition</SAMP> (<i><a href="ini_5794.htm#copyonesequenceintoanothersequence">Chapter 13: Copy One Sequence into Another Sequence</a></i>) or an <SAMP>in-place merge</SAMP> (<i><a href="inp_4704.htm#mergetwoadjacentsequencesintoone">Chapter 13: Merge two Adjacent Sequences into One</a></i>)</P>
<A HREF="sidebar.htm#sidebar56"><IMG SRC="images/note.gif" BORDER=0> <STRONG>Obtaining the Source</STRONG></A>

<P>The searching routines described in this section return an iterator that identifies the first element that satisfies the search condition. It is common to store this value in an iterator variable, as follows:</P>
<PRE>   list&#60;int>::iterator where;
   where = find(aList.begin(), aList.end(), 7);
</PRE>
<P>If you want to locate <I>all</I> the elements that satisfy the search conditions you must write a loop.  In that loop, the value yielded by a previous search is first advanced (since otherwise the value yielded by the previous search would once again be returned), and the resulting value is used as a starting point for the new search.   For example, the following loop from the <SAMP>adjacent_find()</SAMP> example program (<i><a href="sea_9743.htm#findconsecutiveduplicateelements">Chapter 13: Find Consecutive Duplicate Elements</a></i>) will print the value of all repeated characters in a string argument.</P>

<A HREF="sidebar.htm#sidebar57"><IMG SRC="images/note.gif" BORDER=0> <STRONG>Check Search Results</STRONG></A>

<PRE>   while ((where = adjacent_find(where, stop)) != stop) {
      cout &#60;&#60; "double " &#60;&#60; *where &#60;&#60; " in position " 
         &#60;&#60; where - start &#60;&#60; endl;
      ++where;
      }
</PRE>
<P>Many of the searching algorithms have an optional argument that can specify a function to be used to compare elements, in place of the equality operator for the container element type (operator <SAMP>==</SAMP>).  In the descriptions of the algorithms we write these optional arguments inside a square bracket, to indicate they need not be specified if the standard equality operator is acceptable.</P>

<A NAME="findanelementsatisfyingacondition"><H3>Find an Element Satisfying a Condition</H3></A>
<P>There are two algorithms, <SAMP>find()</SAMP> and <SAMP>find_if(),</SAMP> that are used to find the first element that satisfies a condition.  The declarations of these two algorithms are as follows:</P>
<PRE>InputIterator find_if (InputIterator first, InputIterator last, 
      Predicate);

InputIterator find (InputIterator first, InputIterator last, 
      const T&#38;);
</PRE>
<P>The algorithm <SAMP>find_if()</SAMP> takes as argument a predicate function, which can be any function that returns a boolean value (<i>see <a href="pre_1157.htm">Chapter 3</a></i>).  The <SAMP>find_if()</SAMP> algorithm returns a new iterator that designates the first element in the sequence that satisfies the predicate.  The second argument, the past-the-end iterator, is returned if no element is found that matches the requirement.  Because the resulting value is an iterator, the dereference operator (the <SAMP>*</SAMP> operator) must be used to obtain the matching value.  This is illustrated in the example program.</P>
<P>The second form of the algorithm, <SAMP>find(),</SAMP> replaces the predicate function with a specific value, and returns the first element in the sequence that tests equal to this value, using the appropriate equality operator (the <SAMP>==</SAMP> operator) for the given data type.</P>

<A HREF="sidebar.htm#sidebar58"><IMG SRC="images/note.gif" BORDER=0> <STRONG>Searching Sets and Maps</STRONG></A>

<P>The following example program illustrates the use of these algorithms:</P>
<PRE>void find_test ()
   // illustrate the use of the find algorithm
{
   int vintageYears[] = {1967, 1972, 1974, 1980, 1995};
   int * start = vintageYears;
   int * stop = start + 5;
   int * where = find_if (start, stop, isLeapYear);

   if (where != stop)
      cout &#60;&#60; "first vintage leap year is " &#60;&#60; *where &#60;&#60; endl;
   else
      cout &#60;&#60; "no vintage leap years" &#60;&#60; endl;

   where = find(start, stop, 1995);

   if (where != stop)
      cout &#60;&#60; "1995 is position " &#60;&#60; where - start 
         &#60;&#60; " in sequence" &#60;&#60; endl;
   else
      cout "1995 does not occur in sequence" &#60;&#60; endl;
}</PRE>
<A NAME="findconsecutiveduplicateelements"><H3>Find Consecutive Duplicate Elements</H3></A>
<P>The <SAMP>adjacent_find()</SAMP> algorithm is used to discover the first element in a sequence equal to the next immediately following element.  For example, if a sequence contained the values 1 4 2 5 6 6 7 5, the algorithm would return an iterator corresponding to the first 6 value.  If no value satisfying the condition is found, then the end-of-sequence iterator is returned.  The declaration of the algorithm is as follows:</P>
<PRE>ForwardIterator adjacent_find (ForwardIterator first, 
   ForwardIterator last [, BinaryPredicate ] );</PRE>
<!--ASQ-1 The style "teletype gap" is not associated; its content follows: --><P>The first two arguments specify the sequence to be examined. The optional third argument must be a binary predicate (a binary function returning a boolean value).  If present, the binary function is used to test adjacent elements, otherwise the equality operator (operator <SAMP>==</SAMP>) is used.</P>
<P>The example program searches a text string for adjacent letters.  In the example text these are found in positions 5, 7, 9, 21 and 37.  The increment is necessary inside the loop in order to avoid the same position being discovered repeatedly.</P>
<PRE>void adjacent_find_example ()
   // illustrate the use of the adjacent_find instruction
{
   char * text = "The bookkeeper carefully opened the door.";</PRE>
<!--ASQ-1 The style "teletype gap" is not associated; its content follows: --><PRE>   char * start = text;
   char * stop = text + strlen(text);
   char * where = start;

   cout &#60;&#60; "In the text: " &#60;&#60; text &#60;&#60; endl;
   while ((where = adjacent_find(where, stop)) != stop) {
      cout &#60;&#60; "double " &#60;&#60; *where 
         &#60;&#60; " in position " &#60;&#60; where - start &#60;&#60; endl;
      ++where;
   }
}
</PRE>
<A NAME="findasubsequencewithinasequence"><H3>Find a Subsequence within a Sequence</H3></A>
<P>The algorithm <SAMP>search()</SAMP> is used to locate the beginning of a particular subsequence within a larger sequence.  The easiest example to understand is the problem of looking for a particular substring within a larger string, although the algorithm can be generalized to other uses.  The arguments are assumed to have at least the capabilities of forward iterators.</P>
<PRE>ForwardIterator search 
   (ForwardIterator first1, ForwardIterator last1, 
   ForwardIterator first2, ForwardIterator last2 
   [, BinaryPredicate ]);
</PRE>

<A HREF="sidebar.htm#sidebar59"><IMG SRC="images/note.gif" BORDER=0> <STRONG>Speed of Search</STRONG></A>

<P>Suppose, for example, that we wish to discover the location of the string <SAMP>"ration"</SAMP> in the string <SAMP>"dreams and aspirations".</SAMP>  The solution to this problem is shown in the example program.  If no appropriate match is found, the value returned is the past-the-end iterator for the first sequence.</P>
<PRE>void search_example ()
      // illustrate the use of the search algorithm
{
   char * base = "dreams and aspirations";
   char * text = "ration";

   char * where = search(base, base + strlen(base), 
         text, text + strlen(text));

   if (*where != '\0')
      cout &#60;&#60; "substring position: " &#60;&#60; where - base &#60;&#60; endl;
   else
      cout &#60;&#60; "substring does not occur in text" &#60;&#60; endl;
}
</PRE>
<P>Note that this algorithm, unlike many that manipulate two sequences, uses a starting and ending iterator pair for both sequences, not just the first sequence.</P>
<P>Like the algorithms <SAMP>equal()</SAMP> and <SAMP>mismatch(),</SAMP> an alternative version of <SAMP>search()</SAMP> takes an optional binary predicate that is used to compare elements from the two sequences.</P>

<A NAME="locatemaximumorminimumelement"><H3>Locate Maximum or Minimum Element</H3></A>
<P>The functions <SAMP>max()</SAMP> and <SAMP>min()</SAMP> can be used to find the maximum and minimum of a pair of values.  These can optionally take a third argument that defines the comparison function to use in place of the less-than operator (operator <SAMP>&#60;</SAMP>).  The arguments are values, not iterators:</P>
<PRE>template &#60;class T> 
   const T&#38; max(const T&#38; a, const T&#38; b [, Compare ] );
template &#60;class T> 
   const T&#38; min(const T&#38; a, const T&#38; b [, Compare ] );
</PRE>
<P>The maximum and minimum functions are generalized to entire sequences by the generic algorithms <SAMP>max_element()</SAMP> and <SAMP>min_element().</SAMP> For these functions the arguments are input iterators.</P>
<PRE>ForwardIterator max_element (ForwardIterator first, 
      ForwardIterator last [, Compare ] );
ForwardIterator min_element (ForwardIterator first, 
      ForwardIterator last [, Compare ] );
</PRE>

<A HREF="sidebar.htm#sidebar60"><IMG SRC="images/note.gif" BORDER=0> <STRONG>Largest and Smallest Elements of a Set</STRONG></A>

<P>These algorithms return an iterator that denotes the largest or smallest of the values in a sequence, respectively.  Should more than one value satisfy the requirement, the result yielded is the first satisfactory value.  Both algorithms can optionally take a third argument, which is the function to be used as the comparison operator in place of the default operator.</P>
<P>The example program illustrates several uses of these algorithms.  The function named <SAMP>split()</SAMP> used to divide a string into words in the string example is described in <a href="exa_5786.htm">Chapter 19 (<i>Example Program of auto_ptr</i>)</a>.  The function <SAMP>randomInteger() </SAMP>is described in <a href="var_0565.htm#randomaccessiterators">Chapter 2 (<i>Random Access Iterators</i>)</a>.</P>
<PRE>void max_min_example ()
   // illustrate use of max_element and min_element algorithms
{
   // make a vector of random numbers between 0 and 99
   vector&#60;int> numbers(25);
   for (int i = 0; i &#60; 25; i++)
      numbers[i] = randomInteger(100);

   // print the maximum
   vector&#60;int>::iterator max = 
      max_element(numbers.begin(), numbers.end());
   cout &#60;&#60; "largest value was " &#60;&#60; * max &#60;&#60; endl;

   // example using strings
   string text = 
      "It was the best of times, it was the worst of times.";
   list&#60;string> words;
   split (text, " .,!:;", words);
   cout &#60;&#60; "The smallest word is " 
         &#60;&#60; * min_element(words.begin(), words.end())
         &#60;&#60; " and the largest word is "
         &#60;&#60; * max_element(words.begin(), words.end())
         &#60;&#60; endl;
}
</PRE>

<A NAME="locatethefirstmismatchedelementsinparallelsequences"><H3>Locate the First Mismatched Elements in Parallel Sequences</H3></A>
<P>The name <SAMP>mismatch()</SAMP>  might lead you to think this algorithm was the inverse of the <SAMP>equal()</SAMP> algorithm, which determines if two sequences are equal (<i>see <a href="sca_1926.htm#generalizedinnerproduct">Chapter 13: Generalized Inner Product</a></i>).  Instead, the <SAMP>mismatch()</SAMP> algorithm returns a <B><I>pair</I></B><B><I> </I></B>of iterators that together indicate the first positions where two parallel sequences have differing elements.  (The structure <A HREF="../stdref/pai_5818.htm"><B><I>pair</I></B></A> is described in <a href="map_9326.htm">Chapter 9: <i>The Map Data Abstraction</i></a>).  The second sequence is denoted only by a starting position, without an ending position.  It is assumed (but not checked) that the second sequence contains at least as many elements as the first.  The arguments and return type for <SAMP>mismatch()</SAMP> can be described as follows:</P>
<PRE>pair&#60;InputIterator, InputIterator> mismatch 
   (InputIterator first1, InputIterator last1, 
      InputIterator first2 [, BinaryPredicate ] );</PRE>
<!--ASQ-1 The style "teletype gap" is not associated; its content follows: --><P>The elements of the two sequences are examined in parallel, element by element.  When a mismatch is found, that is, a point where the two sequences differ, then a <B><I>pair</I></B> containing iterators denoting the locations of the two differing elements is constructed and returned.  If the first sequence becomes exhausted before discovering any mismatched elements, then the resulting pair contains the ending value for the first sequence, and the last value examined in the second sequence.  (The second sequence need not yet be exhausted).</P>
<P>The example program illustrates the use of this procedure.  The function <SAMP>mismatch_test()</SAMP> takes as arguments two string values.  These are lexicographically compared and a message printed indicating their relative ordering. (This is similar to the analysis performed by the <SAMP>lexicographic_compare()</SAMP> algorithm, although that function simply returns a boolean value.) Because the <SAMP>mismatch()</SAMP> algorithm assumes the second sequence is at least as long as the first, a comparison of the two string lengths is performed first, and the arguments are reversed if the second string is shorter than the first.  After the call on <SAMP>mismatch()</SAMP> the elements of the resulting pair are separated into their component parts.  These parts are then tested to determine the appropriate ordering.</P>
<PRE>   void mismatch_test (char * a, char * b)
          // illustrate the use of the mismatch algorithm
   {
      pair&#60;char *, char *> differPositions(0, 0);
      char * aDiffPosition;
      char * bDiffPosition;</PRE>
<!--ASQ-1 The style "teletype gap" is not associated; its content follows: --><PRE>      if (strlen(a) &#60; strlen(b)) {
         // make sure longer string is second
         differPositions = mismatch(a, a + strlen(a), b);
         aDiffPosition = differPositions.first;
         bDiffPosition = differPositions.second;
         }
      else {
         differPositions = mismatch(b, b + strlen(b), a);
         // note following reverse ordering
         aDiffPosition = differPositions.second;
         bDiffPosition = differPositions.first;
         }</PRE><!--ASQ-1 The style "teletype gap" is not associated; its content follows: --><PRE>      // compare resulting values
      cout &#60;&#60; "string " &#60;&#60; a;
      if (*aDiffPosition == *bDiffPosition)
         cout &#60;&#60; " is equal to ";
      else if (*aDiffPosition &#60; *bDiffPosition)
         cout &#60;&#60; " is less than ";
      else
         cout &#60;&#60; " is greater than ";
      cout &#60;&#60; b &#60;&#60; endl;
   }
</PRE><P>A second form of the <SAMP>mismatch()</SAMP> algorithm is similar to the one illustrated, except it accepts a binary predicate as a fourth argument.  This binary function is used to compare elements, in place of the <SAMP>==</SAMP> operator.</P>

<HR>
<A HREF="ini_5794.htm"><IMG SRC="images/prev.gif"></A> <A HREF="booktoc.htm"><IMG SRC="images/toc.gif"></A> <A HREF="inp_4704.htm"><IMG SRC="images/next.gif"></A></BODY></HTML>
