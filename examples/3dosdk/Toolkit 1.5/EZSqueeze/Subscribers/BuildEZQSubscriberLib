###########################################################################   File:       BuildSubscriberLib##	Contains:	Script for building the Subscriber library##	Copyright © 1994 The 3DO Company## 	All rights reserved. This material constitutes confidential and proprietary #	information of the 3DO Company and shall not be used by any Person or for any #	purpose except as expressly authorized in writing by the 3DO Company.###	History:#	 8/16/94	dtc		Added checks to make sure the Includes folder isn't empty.#	 6/24/94	rdg		New today.  Create a folder for each subscriber and create a #						hierarchical makefile scheme for building subscriber.lib.################################################################################################################		Symbol definitions#####################################	set	Librarian	"armlib"		set	Library		"Subscriber"			set	StreamDir		"::"	set	ObjectDir		":Objects:"		set UtilitiesDir	":SubscriberUtilities:"	set	ControlDir		":ControlSubscriber:"	set	CPakDir			":CPakSubscriber:"	set	CPakSDir		":CPakSubscriberS:"	set	JoinDir			":JoinSubscriber:"	set	SAudioDir		":SAudioSubscriber:"	set	SAnimDir		":SAnimSubscriber:"	set	ProtoDir		":ProtoSubscriber:"	set	EZQDir			":EZQSubscriber:"	set IncludesDir		":Includes:"## Use the -g switch for symbolic debugging.#	set GlobalCOptions	'-g -zps0 -za1 '		set GlobalCOptions	'-zps0 -za1 '		set GlobalSOptions	"-bi -g "	set	RelBranchSwitch "-d RELATIVE_BRANCHING=0"	###################################### Save exit status so we can # restore it when done#####################################	set OldExit {Exit}	set Exit 0	######################################	Delete all object files for a #   "clean" build completely from source#####################################	If "{1}" == "clean"		# Delete subscriber library		delete -y -i subscriber.lib		# Delete object files in each directory.		Begin				For SubsDir in `Files -d`				Delete -y -i "{SubsDir}"Å.o			End		End ·· Dev:Null	End######################################	Build the Subscriber found in #   each of the folders#####################################	For SubsDir in `Files -d`			# Get the Subscriber name			(Evaluate "{SubsDir}" =~ /Å:(Å)¨1:/ ) ·· Dev:Null		Set SubsName "{¨1}"			# Build the Subscribers and utilities			If "{SubsName}" != "Includes" AND  "{SubsName}" != "Objects"	¶			AND "{SubsName}" != CPakSubscriberS					Echo "Building {SubsName} ..."			Directory "{SubsDir}"			make {SubsName} -f {SubsName}.make -d GlobalCOptions="{GlobalCOptions}" ¶						-d RelBranchSwitch="{RelBranchSwitch}" > {SubsName}.makeout			{SubsName}.makeout			Delete -y {SubsName}.makeout						For HdrFile in `Files Å.h`				# Make sure there's a copy of the header file in the				# includes folder				If ! `exists "::Includes:{HdrFile}" ³³ Dev:Null`					echo "Copying {HdrFile} into '::Includes:' ..."					Duplicate "{HdrFile}" "::Includes:"									# Make sure no one modified the public copy of the header files				Else If `newer ::Includes:{HdrFile} {HdrFile} ³³ Dev:Null` 					beep C,60 C,60					echo " Warning  error: "					echo "   The copy of {HdrFile} in the public Includes folder "					echo "   is newer than the copy in the {SubsDir} directory!"					echo "   The public copy should never be edited!!!"					# Directory "::"					# Exit 1				End							End						# Reset directory				Directory "::"						#Reset program			unset Program					End	End######################################		Build a makefile to #		construct the library#####################################	# build a list of object files to be librarified	Echo "Building Subscriber Library ..."	echo -n OBJECTS		=										> {Library}.lib.make		For ObjFiles in `Files -s {ObjectDir}`		echo "	" {ObjectDir}{ObjFiles} "			"'¶'		>> {Library}.lib.make	End	echo  "		"												>> {Library}.lib.make	echo  "		"												>> {Library}.lib.make		echo {Library}.lib		ÄÄ	'{OBJECTS}' 					>> {Library}.lib.make	echo "	"	armlib	-c -o	{Library}.lib	'{OBJECTS}'		>> {Library}.lib.make	make {Library}.lib -f {Library}.lib.make 					> {Library}.lib.makeout	{Library}.lib.makeout	Delete -y {Library}.lib.make	Delete -y {Library}.lib.makeout###################################### Restore exit status#####################################	set Exit {OldExit}###################################### Say we're finished#####################################	echo "BuildSubscriberLib finished."	beep -1F,30 e,30 C,60