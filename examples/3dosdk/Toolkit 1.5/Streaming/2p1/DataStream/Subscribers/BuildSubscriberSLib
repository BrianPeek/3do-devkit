##########################################################################
#   File:       BuildSubscriberLib
#
#	Contains:	Script for building the SubscriberShuttle library
#
#	Copyright © 1994 The 3DO Company
#
# 	All rights reserved. This material constitutes confidential and proprietary 
#	information of the 3DO Company and shall not be used by any Person or for any 
#	purpose except as expressly authorized in writing by the 3DO Company.
#
#
#	History:
#	10/17/94	dtc		Fix - Make a list of only object files in Objects
#						folder when building subscriber.lib.
#						Fix - Fix the date of the public copy if it
#						is equal to the private copy.
#						Fix - Create :Objects: folder if one doesn't exists.
#	09/26/94	dtc		Copy newer versions of header files into
#						the public folder.
#	 8/16/94	dtc		Added checks to make sure the Includes folder isn't empty.
#	 6/24/94	rdg		New today.  Create a folder for each subscriber and create a 
#						hierarchical makefile scheme for building subscriber.lib.
#
# NOTE:		When building libraries for the Shuttle Player, make sure to
#			use the "clean" option to build complelely from source.

##########################################################################

#####################################
#		Symbol definitions
#####################################
	set	Librarian	"armlib"
	
	set	Library		"SubscriberShuttle"
		
	set	StreamDir		"::"
	set	ObjectDir		":Objects:"
	
	set UtilitiesDir	":SubscriberUtilities:"
	set	ControlDir		":ControlSubscriber:"
	set	CPakDir			":CPakSubscriber:"
	set	CPakSDir		":CPakSubscriberS:"
	set	JoinDir			":JoinSubscriber:"
	set	SAudioDir		":SAudioSubscriber:"
	set	SAnimDir		":SAnimSubscriber:"
	set	ProtoDir		":ProtoSubscriber:"
	set IncludesDir		":Includes:"
#
# Use the -g switch for symbolic debugging.
#	set GlobalCOptions	'-g -zps0 -za1 '
	
	set GlobalCOptions	'-zps0 -za1 '
	
	set GlobalSOptions	"-bi -g "

	set	RelBranchSwitch "-d RELATIVE_BRANCHING=1"
	
#####################################
# Save exit status so we can 
# restore it when done
#####################################
	set OldExit {Exit}
	set Exit 0
	
#####################################
# Create an Objects folder 
# if one doesn't exists
#####################################
If !`exists -d Objects`
	NewFolder Objects
End

#####################################
#	Delete all object files for a 
#   "clean" build completely from source
#####################################
	If "{1}" == "clean"
		# Delete subscriber library
		delete -y -i subscriber.lib

		# Delete object files in each directory.
		Begin
				For SubsDir in `Files -d`
				Delete -y -i "{SubsDir}"Å.o
			End
		End ·· Dev:Null
	End

#####################################
#	Build the Subscriber found in 
#   each of the folders
#####################################

	For SubsDir in `Files -d`
	
		# Get the Subscriber name
	
		(Evaluate "{SubsDir}" =~ /Å:(Å)¨1:/ ) ·· Dev:Null
		Set SubsName "{¨1}"
	
		# Build the Subscribers and utilities
	
		If "{SubsName}" != "Includes" AND  "{SubsName}" != "Objects"	 ¶
			AND "{SubsName}" != "CPakSubscriber"	¶
			AND "{SubsName}" != For_InControl_User
		
			Directory "{SubsDir}"
			If `exists "{SubsName}".make ³³ Dev:Null`
				Echo "Building {SubsName} ..."
		
				make {SubsName} -f {SubsName}.make -d GlobalCOptions="{GlobalCOptions}" ¶
							-d RelBranchSwitch="{RelBranchSwitch}" > {SubsName}.makeout
				{SubsName}.makeout
				Delete -y {SubsName}.makeout

			End #If make file exits

			For HdrFile in `Files Å.h ³³ Dev:Null`
				If "{status}" != 0
					Continue
				End
				
				# Make sure there's a copy of the header file in the
				# includes folder
				If ! `exists "::Includes:{HdrFile}" ³³ Dev:Null`
					echo "Copying {HdrFile} into '::Includes:' ..."
					Duplicate -y "{HdrFile}" "::Includes:"
					
				# Make sure no one modified the public copy of the header files
				Else If `newer ::Includes:{HdrFile} {HdrFile} ³³ Dev:Null` 

					# Make sure the files are really different
					equal -d -q "::Includes:{HdrFile}" "{HdrFile}"
					If ({status} == 0)
					
						# The files are the same, reset the modifacation date
						# of the public copy
						(Evaluate "`files -n -x m {HdrFile}`" =~ /Å.h[ ]+(Å)¨1/ ) ·· Dev:Null
						setfile "::Includes:{HdrFile}" -m "{¨1}"
					Else
						# Files are different, exit
						beep C,60 C,60
						echo " Exiting on error: "
						echo "   The copy of {HdrFile} in the public Includes folder "
						echo "   is newer than the copy in the {SubsDir} directory!"
						echo "   The public copy should never be edited!!!"
						Directory "::"
						Exit 1
					End # If Files are equal

				# Make sure a newer version of the header files are copied into
				# the public folder.
				Else If `newer {HdrFile} ::Includes:{HdrFile}  ³³ Dev:Null` 
					Duplicate -y "{HdrFile}" "::Includes:"

				End

			End ³³ Dev:Null # end for
			
			# Reset directory	
			Directory "::"
		
		End
	End

#####################################
#		Build a makefile to 
#		construct the library
#####################################

	# build a list of object files to be librarified

	Echo "Building SubscriberShuttle Library ..."

	echo -n OBJECTS		=										> {Library}.lib.make
	
	For ObjFiles in `Files -s {ObjectDir}Å.o`
		echo "	" {ObjectDir}{ObjFiles} "			"'¶'		>> {Library}.lib.make
	End

	echo  "		"												>> {Library}.lib.make
	echo  "		"												>> {Library}.lib.make
	
	echo {Library}.lib		ÄÄ	'{OBJECTS}' 					>> {Library}.lib.make
	echo "	"	armlib	-c -o	{Library}.lib	'{OBJECTS}'		>> {Library}.lib.make

	make {Library}.lib -f {Library}.lib.make 					> {Library}.lib.makeout

	{Library}.lib.makeout
	Delete -y {Library}.lib.make
	Delete -y {Library}.lib.makeout


#####################################
# Restore exit status
#####################################
	set Exit {OldExit}

#####################################
# Say we're finished
#####################################
	echo "BuildSubscriberSLib finished."
	beep -1F,30 e,30 C,60



