##########################################################################
#   File:       BuildDSShuttle
#
#	Contains:	Script to build all of the data stream components for
#				ShuttlePlayer :
#						dsShuttle.lib				data streamer
#						dataacqShuttle.lib			data acquisition
#						subscriberShuttle.lib		subscriber library
#
#	Usage:		BuildDSShuttle { root folder | "" }
#
#	Copyright © 1992-1994 The 3DO Company
#
# 	All rights reserved. This material constitutes confidential and proprietary 
#	information of the 3DO Company and shall not be used by any Person or for any 
#	purpose except as expressly authorized in writing by the 3DO Company.
#
#	Note:
#	This script will force a clean build by first deleting all the objects.

#	History:
#	08/17/94	dtc		Execute the new BuildSubscriberLib script to build
#						the Subscriber.lib and build ShuttlePlayer.
#	06/23/94	dtc		This is a copy of the BuildDS that builds
#						the Data Stream components to be used with
#						ShuttlePlayer.
##########################################################################
#	11/9/93		jb		Split build of test programs into separate make file
#						keeping just the commands to build the basic libraries.
#	10/26/93	jb		Add build commands for PlaySA; modify
#						build commands for sample applications to be boilerplate
#						set of commands that depends on the shell variable
#						"{SampleApp}" for easier maintenence.
#	10/19/93	jb		Add build commands for TestSA and PlaySAnim test programs
#	7/9/93		jb		Save and restore the state of {Exit} around the 
#						deletion of files if "clean" option selected.
#	6/27/93		jb		Allow command line specification of root directory
#						Add "clean" option to specify deletion of ALL
#						object files prior to building.
#	6/24/93		jb		New today.
##########################################################################

#
#	Determine the datastream root folder name.
#
if "{1}" == ""
	set DSFolder "`getfilename -q -d -m "Select release directory"`"
else
	set DSFolder "{1}"
end

#
#	Delete all object files for a "clean" build completely from source
#
Begin
	# Save state of {Exit}
	set saveExit {Exit}
	set Exit 0

	# Delete all subscriber object files
	delete -i "{DSFolder}"DataStream:Subscribers:subscriberShuttle.lib

	delete -i "{DSFolder}"DataStream:Subscribers:Objects:Å

	# Delete all datastream and dataacq object files
	delete -i "{DSFolder}"DataStream:dataacqShuttle.lib
	delete -i "{DSFolder}"DataStream:dsShuttle.lib


	delete -i "{DSFolder}"DataStream:Objects:Å

	# Restore the state of {Exit}
	set Exit {saveExit}

End ·· Dev:Null

#
# Build the ShuttleSubscriber library
#

	echo "Building subscriberS.lib ..."
	directory "{DSFolder}"DataStream:Subscribers:


	execute BuildSubscriberSLib

#
# Build data acquisition and the data streamer
#
	echo "Building dsShuttle.lib and dataacqShuttle.lib ..."
	directory ::
	make -f dataacqShuttle.lib.make dataacqShuttle.lib > dataacqShuttle.lib.makeout
	dataacqShuttle.lib.makeout
	delete -i dataacqShuttle.lib.makeout
	
	make -f dsShuttle.lib.make dsShuttle.lib > dsShuttle.lib.makeout
	dsShuttle.lib.makeout

	delete -i ds.lib.makeout

#
# Clean up the objects folder
#
	delete -i "{DSFolder}"DataStream:Subscribers:Objects:Å

	delete -i "{DSFolder}"DataStream:Objects:Å


#
# Build the ShuttlePlayer
#
	directory "{DSFolder}Examples:ShuttlePlayer:"
	Echo "Building ShuttlePlayer..."
	make -f ShuttlePlayer.make ShuttlePlayer > ShuttlePlayer.makeout
			ShuttlePlayer.makeout
			
	delete -i ShuttlePlayer.makeout
	
#
# Reset directory
#
	directory "{DSFolder}"
#
# Say we're finished
#
	echo "BuildDSShuttle finished."
	Beep

