						About the 3DO C++ Development Tools						---------------------------------------							The 3DO C++ Development Tools provide 3DO developers with ANSI C++ support  	for developing 3DO applications using AT & T's CFront compiler. CFront is a 	front end C++ compiler for ANSI C compilers.		An MPW script, armCPlus, is included in this release which is used by your 	makefile to compile C++ files. armCPlus performs a two pass compile to create  	a binary file for linking. The MPW tool CFront is used for the first pass 	which compiles a C++ source file into a C file and the MPW tool armcc is 	used for the second pass which compiles the C file into a linkable binary 	file.		3DO C++ applications can be compiled and linked with all 3DO libraries.		Installation...	---------------------		You must have a copy of the MPW tool CFront (usually obtained by installing MPW	C++) before you can build C++ applications for 3DO. 		The 3DO C++ development tools are automatically installed when you install the	3DO Software Development Station software.  New MPW scripts, include files,	libraries and examples will be added to your 3DO folder.		C++ Makefile...	---------------------	A C++ makefile file differs from a C makefile in a few ways: 			- Additional symbol for CPLUS.		- Additional options for CPlus		- Additional library file ( CPlusLib.lib )		- Additional default build rules for .cp files		- Main "include file dependency" is for .cp.o instead of .c.o			The makefile does expect your C++ files to have .cp file extensions. Other 	file extensions can be used but the makefile C++ compile rule will have to 	be modified.		### NOTE: Use the CPlus command in your makefile to build your C++ objects. ###	###						DO NOT call CFront directly! 						###  	The Makefile which is installed in {3DOFolder}Examples:CPlusExamples illustrates	how to build 3DO C++ applications. To adapt this Makefile to build your own	application, copy it into your application's source directory and change its	name to your application's name with the suffix ".make". Open the renamed makefile	and make the following changes:			- Assign the Application symbol to your application's name		- Add any other libraries you use to the LIBS list		- Add any other object files you use to the OBJECTS variable 		- Specify any additional include file dependencies. 			When you're done with these steps, choose Set Directory from MPW's Directory menu	and select your application's directory, then choose Build or Full Build from the	Build menu and enter your application's name.		Debugger...	---------------------		The 3DO source level debugger now supports C++.  You must be using the debugger	from Developer release 1.2 or later.		### NOTE:  Make sure you turn on the C++ Support option in the debugger ###	###							preferences dialog 							###		C++ support includes unmangling of C++ symbols and generally being a little	smarter about C++. Otherwise, you do not have to do anything new or 	special to debug C++ programs.		If your source code doesn't immediately appear in the debugger window	after you've entered the debug command in the terminal window, then try 	the following:			1. Set the debugger directory to /remote		2. Reenter the debug command in the terminal window		3. Set the debugger directory to your application directory		4. Type main in the source window's examine address		5. Press the examine button		About C++ Examples...	---------------------	A few example C++ programs have included with this release to make the initial	test drive a little easier.  Start with example 1, HelloWorld, to get 	comfortable with the new makefile and build.  Then follow the order in which	the examples are numbered. Two classic C++ library classes have been included:	one for strings and the other for lists.  The examples also demonstrate simple usage	of some of 3DO's Portfolio calls.		1. HelloWorld			This is the classic starter example which sends a string to 		the output console.  HelloWorld demonstrates how to define a class and 		access its members to perform an action.		2. Strings			This defines a simple string class which is necessary in every standard C++		library. The CString class contains methods for creating, comparing and editing 		null terminated C strings.			3. Lists			This defines a simple list class which is necessary in every standard C++		library.  The CList class is a base class, containing methods for appending,		removing and accessing entries in a list.  List entries are simply void *'s.		4. Application			This defines a base class for creating 3DO C++ applications.  Classes which 		descends  from this class simply have to implement code in response to  		the events processed by the base class. Currently this class only  		supports ControlPad events but more events can be added as necessary.  			5. Shapes			This defines a base class and a few subclasses for drawing objects on the 		screen. Three shapes are defined for drawing: lines, rectangles and 		text. The base class keeps track of location, size and color and delegates		the actual drawing to the subclasses.		6. Sound			This defines a class for playing sound files.  Methods are provided for 		playing, stopping, rewinding and looping a sound from a file.  This example		requires the UFOSound folder to be present in $boot.		7. Instrument			This defines a class for handling an aiff file as an instrument.  Methods		are provided for playing, pausing, stopping and changing the rate.  This		example requires the UFOSound folder to be present in $boot.		8. Sample Appl			This is a sample application demonstrating the combined usage of the		example classes. The application puts a shape on the screen and uses the		control pad's direction arrows to move the shape around.  Pressing the A		button will bring the shape to the home position ( the center of the		screen ).  Pressing the B button will change the color of the shape and		play the explosion sound.  Pressing the C Button will exit the program.		This example requires the UFOSound folder to be present in $boot.	Building the Examples	---------------------		You can easily build each of the sample programs using the makefiles that are 	provided with each example.  Simply set your directory to that of the example you	want to build, choose Build from MPW's Build menu and type in the name of 	the example and then click the OK button to start the build.  When the 	build is complete, simply download this program to the 3DO system the same 	way you would a C program and then execute it.	Writing Your Own Applications	-----------------------------		After building and trying the examples, you will undoubtedly want to write an	application of your own or port an existing application. To do this, create a	separate directory for your application's source code and follow the procedure	documented in the "C++ Makefile" section above.  Remember to use the .cp suffix	for your C++ source files.	### NOTE: You MUST specify #include "CPlusSwiHack.h AFTER all the other ###	###       3DO header includes in EVERY ONE OF YOUR .cp FILES.           ###	###																		###	###		  Do NOT include CPlusSwiHack.h in your ordinary .c files.		###	###																		###	###	      See the 3DORelease1.3 Release notes for further information   ###																###  	###	      on this include file.                                         ###																###  